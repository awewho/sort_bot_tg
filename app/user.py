from aiogram import Bot
from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from datetime import datetime

from app.database.requests import (
    set_user, add_request, get_user_by_tg_id, get_user_points, get_point_by_id, 
    is_point_available, bind_point_to_user, update_bags_count
)
from app.states import Reg, BagFull, Help
from app.keyboards import bags_count_keyboard, user_command, help_command, notification_keyboard

user = Router()

@user.message(Command("menu"))
async def cmd_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_command())


@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞
    user = await get_user_by_tg_id(message.from_user.id)
    
    if user and user.point_id:
        # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        point = await get_point_by_id(user.point_id)
        if point:
            await message.answer(
                f'–í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–æ—á–∫–µ {point.point_id}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=user_command()
            )
        else:
            await message.answer(
                '–í–∞—à–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                reply_markup=help_command()
            )
    else:
        # –ï—Å–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await set_user(message.from_user.id)
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏:')
        await state.set_state(Reg.point)


@user.message(Reg.point)
async def process_point(message: Message, state: FSMContext):
    point_id = message.text.strip()
    
    if not point_id.isdigit():
        await message.answer('–ù–æ–º–µ—Ä —Ç–æ—á–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return
    
    point = await get_point_by_id(point_id)
    if not point:
        await message.answer('–¢–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        return
        
    if not await is_point_available(point.point_id):
        await message.answer(
            '–≠—Ç–∞ —Ç–æ—á–∫–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            reply_markup=help_command()
        )
        return
        
    try:
        await bind_point_to_user(point.point_id, message.from_user.id)
        await message.answer(
            f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–æ—á–∫–µ {point.point_id}!',
            reply_markup=user_command()
        )
    except ValueError as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {e}')
    except Exception as e:
        await message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        )
        print(f"Error in process_point: {e}")
    
    await state.clear()

@user.callback_query(F.data == "bag_full")
async def cmd_bag_full(callback: CallbackQuery, state: FSMContext):
    points = await get_user_points(callback.from_user.id)
    if points:
        await callback.message.answer(
            '–°–∫–æ–ª—å–∫–æ –º–µ—à–∫–æ–≤ –∞–ª—é–º–∏–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ?',
            reply_markup=bags_count_keyboard()
        )
        await state.set_state(BagFull.aluminum_count)
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–±–æ—Ä–∞ –º—É—Å–æ—Ä–∞.')

@user.message(BagFull.aluminum_count, F.text.in_(["0","1", "2", "3", "4", "5", "6", "7"]))
async def process_aluminum_count(message: Message, state: FSMContext):
    await state.update_data(aluminum_count=int(message.text))
    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –º–µ—à–∫–æ–≤ –ü–≠–¢ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ?',
        reply_markup=bags_count_keyboard()
    )
    await state.set_state(BagFull.pet_count)

@user.message(BagFull.pet_count, F.text.in_(["0","1", "2", "3", "4", "5", "6", "7"]))
async def process_pet_count(message: Message, state: FSMContext):
    await state.update_data(pet_count=int(message.text))
    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –º–µ—à–∫–æ–≤ —Å—Ç–µ–∫–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ?',
        reply_markup=bags_count_keyboard()
    )
    await state.set_state(BagFull.glass_count)

@user.message(BagFull.glass_count, F.text.in_(["0","1", "2", "3", "4", "5", "6", "7"]))
async def process_glass_count(message: Message, state: FSMContext):
    await state.update_data(glass_count=int(message.text))
    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –º–µ—à–∫–æ–≤ –ø—Ä–æ—á–∏—Ö –æ—Ç—Ö–æ–¥–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ?',
        reply_markup=bags_count_keyboard()
    )
    await state.set_state(BagFull.other_count)

@user.message(BagFull.other_count, F.text.in_(["0","1", "2", "3", "4", "5", "6", "7"]))
async def process_other_count(message: Message, state: FSMContext):
    data = await state.update_data(other_count=int(message.text))
    
    aluminum = data.get('aluminum_count', 0)
    pet = data.get('pet_count', 0)
    glass = data.get('glass_count', 0)
    other = data.get('other_count', 0)
    total = sum([aluminum, pet, glass, other])
    
    confirm_text = (
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ê–ª—é–º–∏–Ω–∏–π: {aluminum}\n"
        f"–ü–≠–¢: {pet}\n"
        f"–°—Ç–µ–∫–ª–æ: {glass}\n"
        f"–ü—Ä–æ—á–∏–µ: {other}\n"
        f"–í—Å–µ–≥–æ: {total}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(confirm_text, reply_markup=notification_keyboard())
    await state.set_state(BagFull.confirmation)

@user.callback_query(BagFull.confirmation, F.data == "confirm_bags")
async def confirm_bags(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    points = await get_user_points(callback.from_user.id)
    
    if points:
        total_bags = sum([
            data.get('aluminum_count', 0),
            data.get('pet_count', 0),
            data.get('glass_count', 0),
            data.get('other_count', 0)
        ])
        
        for point in points:
            await add_request(
                point_id=point.point_id,
                user_id=callback.from_user.id,  # –î–æ–±–∞–≤–ª–µ–Ω user_id
                activity="bag_full",
                pet_bag=data.get('pet_count'),
                aluminum_bag=data.get('aluminum_count'),
                glass_bag=data.get('glass_count'),
                other=data.get('other_count')
            )
            
            await update_bags_count(point.point_id, total_bags)
        
        await callback.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –º—ã –ø—Ä–∏—à–ª–µ–º –≥—Ä—É–∑–æ–≤–∏–∫ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –¥–Ω–µ–π",
            reply_markup=user_command()
        )
    else:
        await callback.message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å–±–æ—Ä–∞ –º—É—Å–æ—Ä–∞.',
            reply_markup=None
        )
    
    await state.clear()

@user.callback_query(BagFull.confirmation, F.data == "cancel_bags")
async def cancel_bags(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ùå –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=None
    )
    await state.clear()

@user.callback_query(F.data == "adm_help")
async def call_admin(callback: CallbackQuery, bot: Bot):
    user = await get_user_by_tg_id(callback.from_user.id)
    
    if user and user.point_id:
        await add_request(
            point_id=user.point_id,
            user_id=callback.from_user.id,  # –î–æ–±–∞–≤–ª–µ–Ω user_id
            activity="admin_help"
        )
        
        admin_phone_number = "+799999999"
        ADMIN_TG_ID = 753755508
        
        admin_message = (
            f"üîî **–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} ({callback.from_user.id})\n"
            f"üìç –¢–æ—á–∫–∞ —Å–±–æ—Ä–∞ ID: {user.point_id}\n"
            f"üïí –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        try:
            await bot.send_message(
                chat_id=ADMIN_TG_ID,
                text=admin_message,
                parse_mode="Markdown"
            )
            
            await callback.message.answer(
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                f"üìû –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É: {admin_phone_number}", reply_markup=user_command()
            )
        except Exception as e:
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    else:
        await callback.message.answer(
            '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Ç–æ—á–∫—É —Å–±–æ—Ä–∞.',
            reply_markup=help_command()
        )