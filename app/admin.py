from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command, Filter, StateFilter
from aiogram.fsm.context import FSMContext

import os
from openpyxl import Workbook
from datetime import datetime

from app.database.requests import (
    get_all_points, get_all_zones, get_all_regions, 
    get_points_by_zone, get_zones_by_region,
    get_report_data, get_user_by_tg_id, 
    add_point, add_region, add_zone, 
    get_point_by_id,get_region_by_id,get_zone_by_id, 
    add_shipment, get_user_by_point_id,
    update_bags_count, get_all_requests_sorted,
    get_all_shipments_sorted, get_combined_data_sorted, delete_point_and_related_data
)
from app.states import Reports, ShipmentStates, CreatePoint
from app.keyboards import (
    report_keyboard, admin_keyboard, driver_keyboard,
    cancel_keyboard, confirm_keyboard, 
    get_cancel_keyboard, get_category_keyboard, get_confirmation_keyboard, 
    get_main_materials_keyboard, get_other_materials_keyboard)

ADMIN_IDS = [753755508, 1582399282, 7854337092, 7854337092, 7363212828, 6700699811]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

admin = Router()

class Admin(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

@admin.message(Admin(), Command("A1"))
async def admin_start(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await message.answer(
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:",  # "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        reply_markup=admin_keyboard()
    )

@admin.callback_query(Admin(), F.data == 'report')
async def cmd_report(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', reply_markup=report_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
    await state.set_state(Reports.report_type)

@admin.callback_query(Admin(), Reports.report_type, F.data == "report_zone")
async def process_zones_report(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –ø–æ –∑–æ–Ω–∞–º"""
    zones = await get_all_zones()
    
    if not zones:
        await callback.message.answer('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô')  # "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–æ–Ω–∞–º."
        return
    
    report_messages = ["‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô:\n\n"]  # "–û—Ç—á–µ—Ç –ø–æ –∑–æ–Ω–∞–º:"
    for zone in zones:
        points = await get_points_by_zone(zone.zone_id)
        total_bags = sum(p.bags_count for p in points) if points else 0
        
        zone_info = (
            f"–ó–æ–Ω–∞ ID: {zone.zone_id}\n"
            f"–†–µ–≥–∏–æ–Ω: {zone.region_id}\n"
            f"–¢–æ—á–µ–∫: {len(points)}\n"
            f"–í—Å–µ–≥–æ –º–µ—à–∫–æ–≤: {total_bags}\n\n"
        )
        
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(report_messages[-1]) + len(zone_info) > 4000:
            report_messages.append(zone_info)
        else:
            report_messages[-1] += zone_info
    
    for msg in report_messages:
        await callback.message.answer(msg)
    
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', reply_markup=admin_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

@admin.callback_query(Admin(), Reports.report_type, F.data == "report_region")
async def process_regions_report(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    regions = await get_all_regions()
    
    if not regions:
        await callback.message.answer('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ')  # "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º."
        return
    
    report_messages = ["‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ:\n\n"]  # "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:"
    for region in regions:
        zones = await get_zones_by_region(region.region_id)
        zone_count = len(zones)
        point_count = 0
        total_bags = 0
        
        for zone in zones:
            points = await get_points_by_zone(zone.zone_id)
            point_count += len(points)
            total_bags += sum(p.bags_count for p in points)
        
        region_info = (
            f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ID: {region.region_id}\n"  # "–†–µ–≥–∏–æ–Ω ID:"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ã‡∏ô: {zone_count}\n"  # "–ó–æ–Ω:"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î: {point_count}\n"  # "–¢–æ—á–µ–∫:"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_bags}\n\n"  # "–í—Å–µ–≥–æ –º–µ—à–∫–æ–≤:"
        )
        
        if len(report_messages[-1]) + len(region_info) > 4000:
            report_messages.append(region_info)
        else:
            report_messages[-1] += region_info
    
    for msg in report_messages:
        await callback.message.answer(msg)
    
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', reply_markup=admin_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

@admin.callback_query(Admin(), Reports.report_type, F.data == "report_region_detail")
async def ask_region_id(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:")  # "–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
    await state.set_state(Reports.waiting_region_id)

@admin.message(Admin(), Reports.waiting_region_id)
async def generate_region_detail_report(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    try:
        region_id = int(message.text.strip())
    except ValueError:
        await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")  # "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ä–µ–≥–∏–æ–Ω–∞."
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    region = await get_region_by_id(region_id)
    if not region:
        await message.answer(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ID {region_id}")  # f"–†–µ–≥–∏–æ–Ω —Å ID {region_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ
    zones = await get_zones_by_region(region_id)
    if not zones:
        await message.answer(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ã‡∏ô‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ {region_id}")  # f"–í —Ä–µ–≥–∏–æ–Ω–µ {region_id} –Ω–µ—Ç –∑–æ–Ω."
        await state.clear()
        return
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    total_points = 0
    total_bags = 0
    zones_data = []
    
    for zone in zones:
        points = await get_points_by_zone(zone.zone_id)
        zone_points = len(points)
        zone_bags = sum(p.bags_count for p in points) if points else 0
        
        total_points += zone_points
        total_bags += zone_bags
        
        if zone_points > 0:
            zones_data.append((zone.zone_id, zone_points, zone_bags))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞
    header = (
        f"üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ {region_id}:\n"  # f"üìä –û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region_id}:"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_points}\n"  # f"–í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {total_points}"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_bags}\n\n"  # f"–í—Å–µ–≥–æ –º–µ—à–∫–æ–≤ –≥–æ—Ç–æ–≤–æ: {total_bags}"
        f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô:\n"  # f"–î–µ—Ç–∞–ª–∏ –ø–æ –∑–æ–Ω–∞–º:"
    )
    
    report_messages = [header]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–æ–Ω–∞–º
    for zone_id, zone_points, zone_bags in zones_data:
        zone_info = f"‚ñ™Ô∏è ‡πÇ‡∏ã‡∏ô {zone_id} - {zone_points} ‡∏à‡∏∏‡∏î ({zone_bags} ‡∏ñ‡∏∏‡∏á)\n"  # f"‚ñ™Ô∏è –ó–æ–Ω–∞ {zone_id} - {zone_points} —Ç–æ—á–µ–∫ ({zone_bags} –º–µ—à–∫–æ–≤)"
        
        if len(report_messages[-1]) + len(zone_info) > 4000:
            report_messages.append(zone_info)
        else:
            report_messages[-1] += zone_info
    
    for msg in report_messages:
        await message.answer(msg)
    
    await message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', reply_markup=admin_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await state.clear()

@admin.callback_query(Admin(), F.data == "generate_log_report")
async def generate_log_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏: –∑–∞—è–≤–∫–∏, –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    requests = await get_all_requests_sorted()
    shipments = await get_all_shipments_sorted()
    combined = await get_combined_data_sorted()
    
    if not requests and not shipments:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        return
    
    wb = Workbook()
    if "Sheet" in wb.sheetnames:
        del wb["Sheet"]
    
    # 1. –õ–∏—Å—Ç —Å –∑–∞—è–≤–∫–∞–º–∏ (—Ç–∞–π—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if requests:
        ws_requests = wb.create_sheet("Requests")
        headers_requests = [
            "Date", 
            "Point ID", 
            "User ID", 
            "Activity Type",
            "PET Bags", 
            "Aluminum Bags", 
            "Glass Bags", 
            "Other Bags",
            "Total Quantity"
        ]
        ws_requests.append(headers_requests)
        
        for req in requests:
            ws_requests.append([
                req.timestamp.strftime('%Y-%m-%d %H:%M'),
                req.point_id,
                req.user_id,
                req.activity,
                req.pet_bag or 0,
                req.aluminum_bag or 0,
                req.glass_bag or 0,
                req.other or 0,
                (req.pet_bag or 0) + (req.aluminum_bag or 0) + 
                (req.glass_bag or 0) + (req.other or 0)
            ])
    
    # 2. –õ–∏—Å—Ç —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏ (—Ç–∞–π—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if shipments:
        ws_shipments = wb.create_sheet("Shipments")
        headers_shipments = [
            "Date", 
            "Point ID", 
            "Driver ID", 
            "Total Payment",
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 1)
            "PET kg", "PET Price", "PET Total",
            "Paper kg", "Paper Price", "Paper Total",
            "Aluminum kg", "Aluminum Price", "Aluminum Total",
            "Glass kg", "Glass Price", "Glass Total",
            "Small Beer Box kg", "Small Beer Box Price", "Small Beer Box Total",
            "Large Beer Box kg", "Large Beer Box Price", "Large Beer Box Total",
            "Mixed Beer Box kg", "Mixed Beer Box Price", "Mixed Beer Box Total",
            # –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 2)
            "Oil kg", "Oil Price", "Oil Total",
            "Colored Plastic kg", "Colored Plastic Price", "Colored Plastic Total",
            "Iron kg", "Iron Price", "Iron Total",
            "Plastic Bag kg", "Plastic Bag Price", "Plastic Bag Total",
            "Mix kg", "Mix Price", "Mix Total",
            "Other kg", "Other Price", "Other Total"
        ]
        ws_shipments.append(headers_shipments)
        
        for ship in shipments:
            ws_shipments.append([
                ship.timestamp.strftime('%Y-%m-%d %H:%M'),
                ship.point_id,
                ship.user_id,
                ship.total_pay,
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                ship.pet_kg, ship.pet_price, ship.pet_total,
                ship.paper_kg, ship.paper_price, ship.paper_total,
                ship.alum_kg, ship.alum_price, ship.alum_total,
                ship.glass_kg, ship.glass_price, ship.glass_total,
                ship.small_beer_box_kg, ship.small_beer_box_price, ship.small_beer_box_total,
                ship.large_beer_box_kg, ship.large_beer_box_price, ship.large_beer_box_total,
                ship.mixed_beer_box_kg, ship.mixed_beer_box_price, ship.mixed_beer_box_total,
                # –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                ship.oil_kg, ship.oil_price, ship.oil_total,
                ship.colored_plastic_kg, ship.colored_plastic_price, ship.colored_plastic_total,
                ship.iron_kg, ship.iron_price, ship.iron_total,
                ship.plastic_bag_kg, ship.plastic_bag_price, ship.plastic_bag_total,
                ship.mix_kg, ship.mix_price, ship.mix_total,
                ship.other_kg, ship.other_price, ship.other_total
            ])
    
    # 3. –û–±—â–∏–π –ª–∏—Å—Ç (—Ç–∞–π—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if combined:
        ws_combined = wb.create_sheet("All Data")
        headers_combined = [
            "Type", 
            "Date", 
            "Point ID", 
            "User ID",
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            "PET (Bags/kg)", "PET Price", "PET Total",
            "Paper kg", "Paper Price", "Paper Total",
            "Aluminum (Bags/kg)", "Aluminum Price", "Aluminum Total",
            "Glass (Bags/kg)", "Glass Price", "Glass Total",
            "Small Beer Box kg", "Small Beer Box Price", "Small Beer Box Total",
            "Large Beer Box kg", "Large Beer Box Price", "Large Beer Box Total",
            "Mixed Beer Box kg", "Mixed Beer Box Price", "Mixed Beer Box Total",
            # –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            "Oil kg", "Oil Price", "Oil Total",
            "Colored Plastic kg", "Colored Plastic Price", "Colored Plastic Total",
            "Iron kg", "Iron Price", "Iron Total",
            "Plastic Bag kg", "Plastic Bag Price", "Plastic Bag Total",
            "Mix kg", "Mix Price", "Mix Total",
            "Other kg", "Other Price", "Other Total",
            # –ò—Ç–æ–≥–∏
            "Total Amount", 
            "Activity Type (for requests)"
        ]
        ws_combined.append(headers_combined)
        
        for item in combined:
            if item["type"] == "request":
                row = [
                    "Request",
                    item["timestamp"].strftime('%Y-%m-%d %H:%M'),
                    item["point_id"],
                    item["user_id"],
                    item["pet"] or 0, "", "",  # PET (Bags)
                    "", "", "",  # Paper
                    item["aluminum"] or 0, "", "",  # Aluminum (Bags)
                    item["glass"] or 0, "", "",  # Glass (Bags)
                    "", "", "",  # Small Beer Box
                    "", "", "",  # Large Beer Box
                    "", "", "",  # Mixed Beer Box
                    "", "", "",  # Oil
                    "", "", "",  # Colored Plastic
                    "", "", "",  # Iron
                    "", "", "",  # Plastic Bag
                    "", "", "",  # Mix
                    item["other"] or 0, "", "",  # Other
                    "",  # Total Amount
                    item["activity"]  # Activity Type
                ]
            else:
                row = [
                    "Shipment",
                    item["timestamp"].strftime('%Y-%m-%d %H:%M'),
                    item["point_id"],
                    item["user_id"],
                    # PET
                    item["pet_kg"], item["pet_price"], item["pet_total"],
                    # Paper
                    item["paper_kg"], item["paper_price"], item["paper_total"],
                    # Aluminum
                    item["alum_kg"], item["alum_price"], item["alum_total"],
                    # Glass
                    item["glass_kg"], item["glass_price"], item["glass_total"],
                    # Small Beer Box
                    item["small_beer_box_kg"], item["small_beer_box_price"], item["small_beer_box_total"],
                    # Large Beer Box
                    item["large_beer_box_kg"], item["large_beer_box_price"], item["large_beer_box_total"],
                    # Mixed Beer Box
                    item["mixed_beer_box_kg"], item["mixed_beer_box_price"], item["mixed_beer_box_total"],
                    # Oil
                    item["oil_kg"], item["oil_price"], item["oil_total"],
                    # Colored Plastic
                    item["colored_plastic_kg"], item["colored_plastic_price"], item["colored_plastic_total"],
                    # Iron
                    item["iron_kg"], item["iron_price"], item["iron_total"],
                    # Plastic Bag
                    item["plastic_bag_kg"], item["plastic_bag_price"], item["plastic_bag_total"],
                    # Mix
                    item["mix_kg"], item["mix_price"], item["mix_total"],
                    # Other
                    item["other_kg"], item["other_price"], item["other_total"],
                    # Total
                    item["total_pay"],
                    ""  # Activity Type (empty for shipments)
                ]
            ws_combined.append(row)
    
    filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    wb.save(filename)
    await callback.message.answer_document(FSInputFile(filename), reply_markup=admin_keyboard())
    os.remove(filename)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
@admin.message(Command('D1'))
async def cmd_driver(message: Message):
    await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:", reply_markup=driver_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

@admin.callback_query(F.data == "add_shipment")
async def process_add_shipment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏à‡∏∏‡∏î:')  # "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏:"
    await state.set_state(ShipmentStates.point_id)
    await callback.answer()

@admin.message(ShipmentStates.point_id)
async def process_point_id(message: Message, state: FSMContext):
    try:
        point_id = int(message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
        point = await get_point_by_id(point_id)
        if not point:
            await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏ –∑–∞–Ω–æ–≤–æ."
            return
            
        await state.update_data(point_id=point_id)
        await message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:', reply_markup=get_category_keyboard()) #–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ID ‡∏à‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ï‡πá‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà") #–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@admin.callback_query(F.data == "category_main")
async def select_main_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏:", reply_markup=get_main_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "category_other")
async def select_other_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏:", reply_markup=get_other_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:", reply_markup=get_category_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@admin.callback_query(F.data == "material_pet")
async def process_pet_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic PET (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Plastic PET (–∫–≥):"
    await state.set_state(ShipmentStates.pet_kg)
    await callback.answer()

@admin.message(ShipmentStates.pet_kg)
async def process_pet_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        pet_kg = float(text)
        if pet_kg < 0:
            raise ValueError
        await state.update_data(pet_kg=pet_kg)
        
        if pet_kg == 0:
            await state.update_data(pet_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic PET ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Plastic PET —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Plastic PET:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Plastic PET:"
            await state.set_state(ShipmentStates.pet_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.pet_price)
async def process_pet_price(message: Message, state: FSMContext):
    try:
        pet_price = float(message.text)
        if pet_price < 0:
            raise ValueError
        await state.update_data(pet_price=pet_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plastic PET ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Plastic PET —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Paper
@admin.callback_query(F.data == "material_paper")
async def process_paper_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Paper (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Paper (–∫–≥):"
    await state.set_state(ShipmentStates.paper_kg)
    await callback.answer()

@admin.message(ShipmentStates.paper_kg)
async def process_paper_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        paper_kg = float(text)
        if paper_kg < 0:
            raise ValueError
        await state.update_data(paper_kg=paper_kg)
        
        if paper_kg == 0:
            await state.update_data(paper_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Paper ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Paper —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Paper:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Paper:"
            await state.set_state(ShipmentStates.paper_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.paper_price)
async def process_paper_price(message: Message, state: FSMContext):
    try:
        paper_price = float(message.text)
        if paper_price < 0:
            raise ValueError
        await state.update_data(paper_price=paper_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Paper ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Paper —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Aluminum
@admin.callback_query(F.data == "material_alum")
async def process_alum_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Aluminum (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Aluminum (–∫–≥):"
    await state.set_state(ShipmentStates.alum_kg)
    await callback.answer()

@admin.message(ShipmentStates.alum_kg)
async def process_alum_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        alum_kg = float(text)
        if alum_kg < 0:
            raise ValueError
        await state.update_data(alum_kg=alum_kg)
        
        if alum_kg == 0:
            await state.update_data(alum_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Aluminum ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Aluminum —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Aluminum:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Aluminum:"
            await state.set_state(ShipmentStates.alum_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.alum_price)
async def process_alum_price(message: Message, state: FSMContext):
    try:
        alum_price = float(message.text)
        if alum_price < 0:
            raise ValueError
        await state.update_data(alum_price=alum_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Aluminum ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Aluminum —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Glass
@admin.callback_query(F.data == "material_glass")
async def process_glass_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Glass (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Glass (–∫–≥):"
    await state.set_state(ShipmentStates.glass_kg)
    await callback.answer()

@admin.message(ShipmentStates.glass_kg)
async def process_glass_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        glass_kg = float(text)
        if glass_kg < 0:
            raise ValueError
        await state.update_data(glass_kg=glass_kg)
        
        if glass_kg == 0:
            await state.update_data(glass_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Glass ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Glass —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Glass:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Glass:"
            await state.set_state(ShipmentStates.glass_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.glass_price)
async def process_glass_price(message: Message, state: FSMContext):
    try:
        glass_price = float(message.text)
        if glass_price < 0:
            raise ValueError
        await state.update_data(glass_price=glass_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Glass ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Glass —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Small Beer Box
@admin.callback_query(F.data == "material_small_beer_box")
async def process_small_beer_box_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Small Beer Box (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.small_beer_box_kg)
    await callback.answer()

@admin.message(ShipmentStates.small_beer_box_kg)
async def process_small_beer_box_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        small_beer_box_kg = float(text)
        if small_beer_box_kg < 0:
            raise ValueError
        await state.update_data(small_beer_box_kg=small_beer_box_kg)
        
        if small_beer_box_kg == 0:
            await state.update_data(small_beer_box_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Small Beer Box ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Small Beer Box:")
            await state.set_state(ShipmentStates.small_beer_box_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.small_beer_box_price)
async def process_small_beer_box_price(message: Message, state: FSMContext):
    try:
        small_beer_box_price = float(message.text)
        if small_beer_box_price < 0:
            raise ValueError
        await state.update_data(small_beer_box_price=small_beer_box_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Small Beer Box ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Large Beer Box
@admin.callback_query(F.data == "material_large_beer_box")
async def process_large_beer_box_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Large Beer Box (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.large_beer_box_kg)
    await callback.answer()

@admin.message(ShipmentStates.large_beer_box_kg)
async def process_large_beer_box_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        large_beer_box_kg = float(text)
        if large_beer_box_kg < 0:
            raise ValueError
        await state.update_data(large_beer_box_kg=large_beer_box_kg)
        
        if large_beer_box_kg == 0:
            await state.update_data(large_beer_box_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Large Beer Box ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Large Beer Box:")
            await state.set_state(ShipmentStates.large_beer_box_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.large_beer_box_price)
async def process_large_beer_box_price(message: Message, state: FSMContext):
    try:
        large_beer_box_price = float(message.text)
        if large_beer_box_price < 0:
            raise ValueError
        await state.update_data(large_beer_box_price=large_beer_box_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Large Beer Box ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Mixed Beer Box
@admin.callback_query(F.data == "material_mixed_beer_box")
async def process_mixed_beer_box_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mixed Beer Box (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.mixed_beer_box_kg)
    await callback.answer()

@admin.message(ShipmentStates.mixed_beer_box_kg)
async def process_mixed_beer_box_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        mixed_beer_box_kg = float(text)
        if mixed_beer_box_kg < 0:
            raise ValueError
        await state.update_data(mixed_beer_box_kg=mixed_beer_box_kg)
        
        if mixed_beer_box_kg == 0:
            await state.update_data(mixed_beer_box_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mixed Beer Box ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Mixed Beer Box:")
            await state.set_state(ShipmentStates.mixed_beer_box_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.mixed_beer_box_price)
async def process_mixed_beer_box_price(message: Message, state: FSMContext):
    try:
        mixed_beer_box_price = float(message.text)
        if mixed_beer_box_price < 0:
            raise ValueError
        await state.update_data(mixed_beer_box_price=mixed_beer_box_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mixed Beer Box ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 2)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Oil
@admin.callback_query(F.data == "material_oil")
async def process_oil_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Oil (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Oil (–∫–≥):"
    await state.set_state(ShipmentStates.oil_kg)
    await callback.answer()

@admin.message(ShipmentStates.oil_kg)
async def process_oil_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        oil_kg = float(text)
        if oil_kg < 0:
            raise ValueError
        await state.update_data(oil_kg=oil_kg)
        
        if oil_kg == 0:
            await state.update_data(oil_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Oil ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Oil —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Oil:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Oil:"
            await state.set_state(ShipmentStates.oil_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.oil_price)
async def process_oil_price(message: Message, state: FSMContext):
    try:
        oil_price = float(message.text)
        if oil_price < 0:
            raise ValueError
        await state.update_data(oil_price=oil_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Oil ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Oil —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Colored Plastic
@admin.callback_query(F.data == "material_colored_plastic")
async def process_colored_plastic_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Colored Plastic (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.colored_plastic_kg)
    await callback.answer()

@admin.message(ShipmentStates.colored_plastic_kg)
async def process_colored_plastic_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        colored_plastic_kg = float(text)
        if colored_plastic_kg < 0:
            raise ValueError
        await state.update_data(colored_plastic_kg=colored_plastic_kg)
        
        if colored_plastic_kg == 0:
            await state.update_data(colored_plastic_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Colored Plastic ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Colored Plastic:")
            await state.set_state(ShipmentStates.colored_plastic_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.colored_plastic_price)
async def process_colored_plastic_price(message: Message, state: FSMContext):
    try:
        colored_plastic_price = float(message.text)
        if colored_plastic_price < 0:
            raise ValueError
        await state.update_data(colored_plastic_price=colored_plastic_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Colored Plastic ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Iron
@admin.callback_query(F.data == "material_iron")
async def process_iron_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Iron (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.iron_kg)
    await callback.answer()

@admin.message(ShipmentStates.iron_kg)
async def process_iron_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        iron_kg = float(text)
        if iron_kg < 0:
            raise ValueError
        await state.update_data(iron_kg=iron_kg)
        
        if iron_kg == 0:
            await state.update_data(iron_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Iron ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Iron:")
            await state.set_state(ShipmentStates.iron_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.iron_price)
async def process_iron_price(message: Message, state: FSMContext):
    try:
        iron_price = float(message.text)
        if iron_price < 0:
            raise ValueError
        await state.update_data(iron_price=iron_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Iron ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Plastic Bag or Container
@admin.callback_query(F.data == "material_plastic_bag")
async def process_plastic_bag_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic Bag or Container (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.plastic_bag_kg)
    await callback.answer()

@admin.message(ShipmentStates.plastic_bag_kg)
async def process_plastic_bag_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        plastic_bag_kg = float(text)
        if plastic_bag_kg < 0:
            raise ValueError
        await state.update_data(plastic_bag_kg=plastic_bag_kg)
        
        if plastic_bag_kg == 0:
            await state.update_data(plastic_bag_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic Bag or Container ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Plastic Bag or Container:")
            await state.set_state(ShipmentStates.plastic_bag_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.plastic_bag_price)
async def process_plastic_bag_price(message: Message, state: FSMContext):
    try:
        plastic_bag_price = float(message.text)
        if plastic_bag_price < 0:
            raise ValueError
        await state.update_data(plastic_bag_price=plastic_bag_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plastic Bag or Container ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Mix
@admin.callback_query(F.data == "material_mix")
async def process_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mix (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.mix_kg)
async def process_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        mix_kg = float(text)
        if mix_kg < 0:
            raise ValueError
        await state.update_data(mix_kg=mix_kg)
        
        if mix_kg == 0:
            await state.update_data(mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mix ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Mix:")
            await state.set_state(ShipmentStates.mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.mix_price)
async def process_mix_price(message: Message, state: FSMContext):
    try:
        mix_price = float(message.text)
        if mix_price < 0:
            raise ValueError
        await state.update_data(mix_price=mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mix ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Other
@admin.callback_query(F.data == "material_other")
async def process_other_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Other (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.other_kg)
    await callback.answer()

@admin.message(ShipmentStates.other_kg)
async def process_other_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        other_kg = float(text)
        if other_kg < 0:
            raise ValueError
        await state.update_data(other_kg=other_kg)
        
        if other_kg == 0:
            await state.update_data(other_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Other ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Other:")
            await state.set_state(ShipmentStates.other_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.other_price)
async def process_other_price(message: Message, state: FSMContext):
    try:
        other_price = float(message.text)
        if other_price < 0:
            raise ValueError
        await state.update_data(other_price=other_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Other ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
@admin.callback_query(F.data == "finish_shipment")
async def finish_shipment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    summary = "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:\n\n"  # "üìã –°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–≥—Ä—É–∑–∫–µ:"
    total_weight = 0
    total_cost = 0
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'pet_kg' in user_data:
        pet_cost = user_data.get('pet_kg', 0) * user_data.get('pet_price', 0)
        summary += f"üîπ Plastic PET: {user_data['pet_kg']} ‡∏Å‡∏Å., {pet_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['pet_kg']
        total_cost += pet_cost
    
    if 'paper_kg' in user_data:
        paper_cost = user_data.get('paper_kg', 0) * user_data.get('paper_price', 0)
        summary += f"üîπ Paper: {user_data['paper_kg']} ‡∏Å‡∏Å., {paper_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['paper_kg']
        total_cost += paper_cost
    
    if 'alum_kg' in user_data:
        alum_cost = user_data.get('alum_kg', 0) * user_data.get('alum_price', 0)
        summary += f"üîπ Aluminum: {user_data['alum_kg']} ‡∏Å‡∏Å., {alum_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['alum_kg']
        total_cost += alum_cost
    
    if 'glass_kg' in user_data:
        glass_cost = user_data.get('glass_kg', 0) * user_data.get('glass_price', 0)
        summary += f"üîπ Glass: {user_data['glass_kg']} ‡∏Å‡∏Å., {glass_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['glass_kg']
        total_cost += glass_cost
    
    if 'small_beer_box_kg' in user_data:
        small_beer_box_cost = user_data.get('small_beer_box_kg', 0) * user_data.get('small_beer_box_price', 0)
        summary += f"üîπ Small Beer Box: {user_data['small_beer_box_kg']} ‡∏Å‡∏Å., {small_beer_box_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['small_beer_box_kg']
        total_cost += small_beer_box_cost
    
    if 'large_beer_box_kg' in user_data:
        large_beer_box_cost = user_data.get('large_beer_box_kg', 0) * user_data.get('large_beer_box_price', 0)
        summary += f"üîπ Large Beer Box: {user_data['large_beer_box_kg']} ‡∏Å‡∏Å., {large_beer_box_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['large_beer_box_kg']
        total_cost += large_beer_box_cost
    
    if 'mixed_beer_box_kg' in user_data:
        mixed_beer_box_cost = user_data.get('mixed_beer_box_kg', 0) * user_data.get('mixed_beer_box_price', 0)
        summary += f"üîπ Mixed Beer Box: {user_data['mixed_beer_box_kg']} ‡∏Å‡∏Å., {mixed_beer_box_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['mixed_beer_box_kg']
        total_cost += mixed_beer_box_cost
    
    # –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'oil_kg' in user_data:
        oil_cost = user_data.get('oil_kg', 0) * user_data.get('oil_price', 0)
        summary += f"üî∏ Oil: {user_data['oil_kg']} ‡∏Å‡∏Å., {oil_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['oil_kg']
        total_cost += oil_cost
    
    if 'colored_plastic_kg' in user_data:
        colored_plastic_cost = user_data.get('colored_plastic_kg', 0) * user_data.get('colored_plastic_price', 0)
        summary += f"üî∏ Colored Plastic: {user_data['colored_plastic_kg']} ‡∏Å‡∏Å., {colored_plastic_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['colored_plastic_kg']
        total_cost += colored_plastic_cost
    
    if 'iron_kg' in user_data:
        iron_cost = user_data.get('iron_kg', 0) * user_data.get('iron_price', 0)
        summary += f"üî∏ Iron: {user_data['iron_kg']} ‡∏Å‡∏Å., {iron_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['iron_kg']
        total_cost += iron_cost
    
    if 'plastic_bag_kg' in user_data:
        plastic_bag_cost = user_data.get('plastic_bag_kg', 0) * user_data.get('plastic_bag_price', 0)
        summary += f"üî∏ Plastic Bag or Container: {user_data['plastic_bag_kg']} ‡∏Å‡∏Å., {plastic_bag_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['plastic_bag_kg']
        total_cost += plastic_bag_cost
    
    if 'mix_kg' in user_data:
        mix_cost = user_data.get('mix_kg', 0) * user_data.get('mix_price', 0)
        summary += f"üî∏ Mix: {user_data['mix_kg']} ‡∏Å‡∏Å., {mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['mix_kg']
        total_cost += mix_cost
    
    if 'other_kg' in user_data:
        other_cost = user_data.get('other_kg', 0) * user_data.get('other_price', 0)
        summary += f"üî∏ Other: {user_data['other_kg']} ‡∏Å‡∏Å., {other_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['other_kg']
        total_cost += other_cost
    
    summary += f"\nüíé ‡∏£‡∏ß‡∏°: {total_weight:.2f} ‡∏Å‡∏Å., {total_cost:.2f} ‡∏ö‡∏≤‡∏ó"  # "üíé –ò—Ç–æ–≥–æ: –∫–≥, —Ä—É–±."
    
    await callback.message.edit_text(summary, reply_markup=get_confirmation_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@admin.callback_query(F.data == "confirm_shipment")
async def confirm_shipment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    try:
        user = await get_user_by_tg_id(callback.from_user.id)
        if not user:
            await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º callback –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        pet_total = user_data.get('pet_kg', 0.0) * user_data.get('pet_price', 0.0)
        paper_total = user_data.get('paper_kg', 0.0) * user_data.get('paper_price', 0.0)
        alum_total = user_data.get('alum_kg', 0.0) * user_data.get('alum_price', 0.0)
        glass_total = user_data.get('glass_kg', 0.0) * user_data.get('glass_price', 0.0)
        small_beer_box_total = user_data.get('small_beer_box_kg', 0.0) * user_data.get('small_beer_box_price', 0.0)
        large_beer_box_total = user_data.get('large_beer_box_kg', 0.0) * user_data.get('large_beer_box_price', 0.0)
        mixed_beer_box_total = user_data.get('mixed_beer_box_kg', 0.0) * user_data.get('mixed_beer_box_price', 0.0)
        oil_total = user_data.get('oil_kg', 0.0) * user_data.get('oil_price', 0.0)
        colored_plastic_total = user_data.get('colored_plastic_kg', 0.0) * user_data.get('colored_plastic_price', 0.0)
        iron_total = user_data.get('iron_kg', 0.0) * user_data.get('iron_price', 0.0)
        plastic_bag_total = user_data.get('plastic_bag_kg', 0.0) * user_data.get('plastic_bag_price', 0.0)
        mix_total = user_data.get('mix_kg', 0.0) * user_data.get('mix_price', 0.0)
        other_total = user_data.get('other_kg', 0.0) * user_data.get('other_price', 0.0)

        # –û–±—â–∞—è —Å—É–º–º–∞
        total_pay = (
            pet_total + paper_total + alum_total + glass_total + 
            small_beer_box_total + large_beer_box_total + mixed_beer_box_total +
            oil_total + colored_plastic_total + iron_total + 
            plastic_bag_total + mix_total + other_total
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
        await add_shipment(
            point_id=user_data['point_id'],
            user_id=user.tg_id,
            pet_kg=user_data.get('pet_kg', 0.0),
            pet_price=user_data.get('pet_price', 0.0),
            pet_total=pet_total,
            paper_kg=user_data.get('paper_kg', 0.0),
            paper_price=user_data.get('paper_price', 0.0),
            paper_total=paper_total,
            alum_kg=user_data.get('alum_kg', 0.0),
            alum_price=user_data.get('alum_price', 0.0),
            alum_total=alum_total,
            glass_kg=user_data.get('glass_kg', 0.0),
            glass_price=user_data.get('glass_price', 0.0),
            glass_total=glass_total,
            small_beer_box_kg=user_data.get('small_beer_box_kg', 0.0),
            small_beer_box_price=user_data.get('small_beer_box_price', 0.0),
            small_beer_box_total=small_beer_box_total,
            large_beer_box_kg=user_data.get('large_beer_box_kg', 0.0),
            large_beer_box_price=user_data.get('large_beer_box_price', 0.0),
            large_beer_box_total=large_beer_box_total,
            mixed_beer_box_kg=user_data.get('mixed_beer_box_kg', 0.0),
            mixed_beer_box_price=user_data.get('mixed_beer_box_price', 0.0),
            mixed_beer_box_total=mixed_beer_box_total,
            oil_kg=user_data.get('oil_kg', 0.0),
            oil_price=user_data.get('oil_price', 0.0),
            oil_total=oil_total,
            colored_plastic_kg=user_data.get('colored_plastic_kg', 0.0),
            colored_plastic_price=user_data.get('colored_plastic_price', 0.0),
            colored_plastic_total=colored_plastic_total,
            iron_kg=user_data.get('iron_kg', 0.0),
            iron_price=user_data.get('iron_price', 0.0),
            iron_total=iron_total,
            plastic_bag_kg=user_data.get('plastic_bag_kg', 0.0),
            plastic_bag_price=user_data.get('plastic_bag_price', 0.0),
            plastic_bag_total=plastic_bag_total,
            mix_kg=user_data.get('mix_kg', 0.0),
            mix_price=user_data.get('mix_price', 0.0),
            mix_total=mix_total,
            other_kg=user_data.get('other_kg', 0.0),
            other_price=user_data.get('other_price', 0.0),
            other_total=other_total,
            total_pay=total_pay
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        await update_bags_count(user_data['point_id'], 0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        point = await get_point_by_id(user_data['point_id'])
        if point:
            point_user = await get_user_by_point_id(user_data['point_id'])
            if point_user:
                total_weight = (
                    user_data.get('pet_kg', 0) +
                    user_data.get('paper_kg', 0) +
                    user_data.get('alum_kg', 0) +
                    user_data.get('glass_kg', 0) +
                    user_data.get('small_beer_box_kg', 0) +
                    user_data.get('large_beer_box_kg', 0) +
                    user_data.get('mixed_beer_box_kg', 0) +
                    user_data.get('oil_kg', 0) +
                    user_data.get('colored_plastic_kg', 0) +
                    user_data.get('iron_kg', 0) +
                    user_data.get('plastic_bag_kg', 0) +
                    user_data.get('mix_kg', 0) +
                    user_data.get('other_kg', 0)
                )
                
                await callback.bot.send_message(
                    user.tg_id,
                    f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\n"
                    f"üì¶ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°: {total_weight:.2f} ‡∏Å‡∏Å.\n"
                    f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: {total_pay:.2f} ‡∏ö‡∏≤‡∏ó\n\n"
                    f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö!"
                )
        
        await callback.message.edit_text(
            '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå',
            reply_markup=driver_keyboard()
        )
    except ValueError as e:
        await callback.message.edit_text(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}")
    finally:
        await state.clear()
        await callback.answer()

@admin.callback_query(F.data == "add_shipment")
async def process_add_shipment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏à‡∏∏‡∏î:')  # "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏:"
    await state.set_state(ShipmentStates.point_id)
    await callback.answer()

@admin.message(ShipmentStates.point_id)
async def process_point_id(message: Message, state: FSMContext):
    try:
        point_id = int(message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
        point = await get_point_by_id(point_id)
        if not point:
            await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏ –∑–∞–Ω–æ–≤–æ."
            return
            
        await state.update_data(point_id=point_id)
        await message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:', reply_markup=get_category_keyboard()) #–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ID ‡∏à‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ï‡πá‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà") #–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@admin.callback_query(F.data == "category_main")
async def select_main_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏:", reply_markup=get_main_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "category_other")
async def select_other_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏:", reply_markup=get_other_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:", reply_markup=get_category_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@admin.callback_query(F.data == "material_pet")
async def process_pet_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic PET (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Plastic PET (–∫–≥):"
    await state.set_state(ShipmentStates.pet_kg)
    await callback.answer()

@admin.message(ShipmentStates.pet_kg)
async def process_pet_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        pet_kg = float(text)
        if pet_kg < 0:
            raise ValueError
        await state.update_data(pet_kg=pet_kg)
        
        if pet_kg == 0:
            await state.update_data(pet_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic PET ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Plastic PET —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Plastic PET:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Plastic PET:"
            await state.set_state(ShipmentStates.pet_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.pet_price)
async def process_pet_price(message: Message, state: FSMContext):
    try:
        pet_price = float(message.text)
        if pet_price < 0:
            raise ValueError
        await state.update_data(pet_price=pet_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plastic PET ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Plastic PET —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Paper
@admin.callback_query(F.data == "material_paper")
async def process_paper_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Paper (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Paper (–∫–≥):"
    await state.set_state(ShipmentStates.paper_kg)
    await callback.answer()

@admin.message(ShipmentStates.paper_kg)
async def process_paper_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        paper_kg = float(text)
        if paper_kg < 0:
            raise ValueError
        await state.update_data(paper_kg=paper_kg)
        
        if paper_kg == 0:
            await state.update_data(paper_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Paper ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Paper —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Paper:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Paper:"
            await state.set_state(ShipmentStates.paper_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.paper_price)
async def process_paper_price(message: Message, state: FSMContext):
    try:
        paper_price = float(message.text)
        if paper_price < 0:
            raise ValueError
        await state.update_data(paper_price=paper_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Paper ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Paper —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Aluminum
@admin.callback_query(F.data == "material_alum")
async def process_alum_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Aluminum (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Aluminum (–∫–≥):"
    await state.set_state(ShipmentStates.alum_kg)
    await callback.answer()

@admin.message(ShipmentStates.alum_kg)
async def process_alum_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        alum_kg = float(text)
        if alum_kg < 0:
            raise ValueError
        await state.update_data(alum_kg=alum_kg)
        
        if alum_kg == 0:
            await state.update_data(alum_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Aluminum ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Aluminum —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Aluminum:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Aluminum:"
            await state.set_state(ShipmentStates.alum_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.alum_price)
async def process_alum_price(message: Message, state: FSMContext):
    try:
        alum_price = float(message.text)
        if alum_price < 0:
            raise ValueError
        await state.update_data(alum_price=alum_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Aluminum ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Aluminum —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Glass
@admin.callback_query(F.data == "material_glass")
async def process_glass_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Glass (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Glass (–∫–≥):"
    await state.set_state(ShipmentStates.glass_kg)
    await callback.answer()

@admin.message(ShipmentStates.glass_kg)
async def process_glass_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        glass_kg = float(text)
        if glass_kg < 0:
            raise ValueError
        await state.update_data(glass_kg=glass_kg)
        
        if glass_kg == 0:
            await state.update_data(glass_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Glass ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Glass —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Glass:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Glass:"
            await state.set_state(ShipmentStates.glass_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.glass_price)
async def process_glass_price(message: Message, state: FSMContext):
    try:
        glass_price = float(message.text)
        if glass_price < 0:
            raise ValueError
        await state.update_data(glass_price=glass_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Glass ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Glass —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Small Beer Box
@admin.callback_query(F.data == "material_small_beer_box")
async def process_small_beer_box_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Small Beer Box (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.small_beer_box_kg)
    await callback.answer()

@admin.message(ShipmentStates.small_beer_box_kg)
async def process_small_beer_box_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        small_beer_box_kg = float(text)
        if small_beer_box_kg < 0:
            raise ValueError
        await state.update_data(small_beer_box_kg=small_beer_box_kg)
        
        if small_beer_box_kg == 0:
            await state.update_data(small_beer_box_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Small Beer Box ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Small Beer Box:")
            await state.set_state(ShipmentStates.small_beer_box_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.small_beer_box_price)
async def process_small_beer_box_price(message: Message, state: FSMContext):
    try:
        small_beer_box_price = float(message.text)
        if small_beer_box_price < 0:
            raise ValueError
        await state.update_data(small_beer_box_price=small_beer_box_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Small Beer Box ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Large Beer Box
@admin.callback_query(F.data == "material_large_beer_box")
async def process_large_beer_box_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Large Beer Box (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.large_beer_box_kg)
    await callback.answer()

@admin.message(ShipmentStates.large_beer_box_kg)
async def process_large_beer_box_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        large_beer_box_kg = float(text)
        if large_beer_box_kg < 0:
            raise ValueError
        await state.update_data(large_beer_box_kg=large_beer_box_kg)
        
        if large_beer_box_kg == 0:
            await state.update_data(large_beer_box_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Large Beer Box ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Large Beer Box:")
            await state.set_state(ShipmentStates.large_beer_box_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.large_beer_box_price)
async def process_large_beer_box_price(message: Message, state: FSMContext):
    try:
        large_beer_box_price = float(message.text)
        if large_beer_box_price < 0:
            raise ValueError
        await state.update_data(large_beer_box_price=large_beer_box_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Large Beer Box ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Mixed Beer Box
@admin.callback_query(F.data == "material_mixed_beer_box")
async def process_mixed_beer_box_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mixed Beer Box (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.mixed_beer_box_kg)
    await callback.answer()

@admin.message(ShipmentStates.mixed_beer_box_kg)
async def process_mixed_beer_box_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        mixed_beer_box_kg = float(text)
        if mixed_beer_box_kg < 0:
            raise ValueError
        await state.update_data(mixed_beer_box_kg=mixed_beer_box_kg)
        
        if mixed_beer_box_kg == 0:
            await state.update_data(mixed_beer_box_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mixed Beer Box ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Mixed Beer Box:")
            await state.set_state(ShipmentStates.mixed_beer_box_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.mixed_beer_box_price)
async def process_mixed_beer_box_price(message: Message, state: FSMContext):
    try:
        mixed_beer_box_price = float(message.text)
        if mixed_beer_box_price < 0:
            raise ValueError
        await state.update_data(mixed_beer_box_price=mixed_beer_box_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mixed Beer Box ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 2)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Oil
@admin.callback_query(F.data == "material_oil")
async def process_oil_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Oil (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å Oil (–∫–≥):"
    await state.set_state(ShipmentStates.oil_kg)
    await callback.answer()

@admin.message(ShipmentStates.oil_kg)
async def process_oil_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        oil_kg = float(text)
        if oil_kg < 0:
            raise ValueError
        await state.update_data(oil_kg=oil_kg)
        
        if oil_kg == 0:
            await state.update_data(oil_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Oil ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å Oil —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Oil:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ Oil:"
            await state.set_state(ShipmentStates.oil_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.oil_price)
async def process_oil_price(message: Message, state: FSMContext):
    try:
        oil_price = float(message.text)
        if oil_price < 0:
            raise ValueError
        await state.update_data(oil_price=oil_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Oil ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ Oil —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Colored Plastic
@admin.callback_query(F.data == "material_colored_plastic")
async def process_colored_plastic_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Colored Plastic (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.colored_plastic_kg)
    await callback.answer()

@admin.message(ShipmentStates.colored_plastic_kg)
async def process_colored_plastic_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        colored_plastic_kg = float(text)
        if colored_plastic_kg < 0:
            raise ValueError
        await state.update_data(colored_plastic_kg=colored_plastic_kg)
        
        if colored_plastic_kg == 0:
            await state.update_data(colored_plastic_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Colored Plastic ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Colored Plastic:")
            await state.set_state(ShipmentStates.colored_plastic_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.colored_plastic_price)
async def process_colored_plastic_price(message: Message, state: FSMContext):
    try:
        colored_plastic_price = float(message.text)
        if colored_plastic_price < 0:
            raise ValueError
        await state.update_data(colored_plastic_price=colored_plastic_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Colored Plastic ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Iron
@admin.callback_query(F.data == "material_iron")
async def process_iron_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Iron (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.iron_kg)
    await callback.answer()

@admin.message(ShipmentStates.iron_kg)
async def process_iron_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        iron_kg = float(text)
        if iron_kg < 0:
            raise ValueError
        await state.update_data(iron_kg=iron_kg)
        
        if iron_kg == 0:
            await state.update_data(iron_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Iron ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Iron:")
            await state.set_state(ShipmentStates.iron_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.iron_price)
async def process_iron_price(message: Message, state: FSMContext):
    try:
        iron_price = float(message.text)
        if iron_price < 0:
            raise ValueError
        await state.update_data(iron_price=iron_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Iron ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Plastic Bag or Container
@admin.callback_query(F.data == "material_plastic_bag")
async def process_plastic_bag_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic Bag or Container (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.plastic_bag_kg)
    await callback.answer()

@admin.message(ShipmentStates.plastic_bag_kg)
async def process_plastic_bag_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        plastic_bag_kg = float(text)
        if plastic_bag_kg < 0:
            raise ValueError
        await state.update_data(plastic_bag_kg=plastic_bag_kg)
        
        if plastic_bag_kg == 0:
            await state.update_data(plastic_bag_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Plastic Bag or Container ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Plastic Bag or Container:")
            await state.set_state(ShipmentStates.plastic_bag_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.plastic_bag_price)
async def process_plastic_bag_price(message: Message, state: FSMContext):
    try:
        plastic_bag_price = float(message.text)
        if plastic_bag_price < 0:
            raise ValueError
        await state.update_data(plastic_bag_price=plastic_bag_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Plastic Bag or Container ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Mix
@admin.callback_query(F.data == "material_mix")
async def process_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mix (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.mix_kg)
async def process_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        mix_kg = float(text)
        if mix_kg < 0:
            raise ValueError
        await state.update_data(mix_kg=mix_kg)
        
        if mix_kg == 0:
            await state.update_data(mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Mix ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Mix:")
            await state.set_state(ShipmentStates.mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.mix_price)
async def process_mix_price(message: Message, state: FSMContext):
    try:
        mix_price = float(message.text)
        if mix_price < 0:
            raise ValueError
        await state.update_data(mix_price=mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Mix ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Other
@admin.callback_query(F.data == "material_other")
async def process_other_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Other (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.other_kg)
    await callback.answer()

@admin.message(ShipmentStates.other_kg)
async def process_other_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        other_kg = float(text)
        if other_kg < 0:
            raise ValueError
        await state.update_data(other_kg=other_kg)
        
        if other_kg == 0:
            await state.update_data(other_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Other ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. Other:")
            await state.set_state(ShipmentStates.other_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.other_price)
async def process_other_price(message: Message, state: FSMContext):
    try:
        other_price = float(message.text)
        if other_price < 0:
            raise ValueError
        await state.update_data(other_price=other_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Other ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
@admin.callback_query(F.data == "finish_shipment")
async def finish_shipment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    summary = "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:\n\n"  # "üìã –°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–≥—Ä—É–∑–∫–µ:"
    total_weight = 0
    total_cost = 0
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'pet_kg' in user_data:
        pet_cost = user_data.get('pet_kg', 0) * user_data.get('pet_price', 0)
        summary += f"üîπ Plastic PET: {user_data['pet_kg']} ‡∏Å‡∏Å., {pet_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['pet_kg']
        total_cost += pet_cost
    
    if 'paper_kg' in user_data:
        paper_cost = user_data.get('paper_kg', 0) * user_data.get('paper_price', 0)
        summary += f"üîπ Paper: {user_data['paper_kg']} ‡∏Å‡∏Å., {paper_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['paper_kg']
        total_cost += paper_cost
    
    if 'alum_kg' in user_data:
        alum_cost = user_data.get('alum_kg', 0) * user_data.get('alum_price', 0)
        summary += f"üîπ Aluminum: {user_data['alum_kg']} ‡∏Å‡∏Å., {alum_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['alum_kg']
        total_cost += alum_cost
    
    if 'glass_kg' in user_data:
        glass_cost = user_data.get('glass_kg', 0) * user_data.get('glass_price', 0)
        summary += f"üîπ Glass: {user_data['glass_kg']} ‡∏Å‡∏Å., {glass_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['glass_kg']
        total_cost += glass_cost
    
    if 'small_beer_box_kg' in user_data:
        small_beer_box_cost = user_data.get('small_beer_box_kg', 0) * user_data.get('small_beer_box_price', 0)
        summary += f"üîπ Small Beer Box: {user_data['small_beer_box_kg']} ‡∏Å‡∏Å., {small_beer_box_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['small_beer_box_kg']
        total_cost += small_beer_box_cost
    
    if 'large_beer_box_kg' in user_data:
        large_beer_box_cost = user_data.get('large_beer_box_kg', 0) * user_data.get('large_beer_box_price', 0)
        summary += f"üîπ Large Beer Box: {user_data['large_beer_box_kg']} ‡∏Å‡∏Å., {large_beer_box_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['large_beer_box_kg']
        total_cost += large_beer_box_cost
    
    if 'mixed_beer_box_kg' in user_data:
        mixed_beer_box_cost = user_data.get('mixed_beer_box_kg', 0) * user_data.get('mixed_beer_box_price', 0)
        summary += f"üîπ Mixed Beer Box: {user_data['mixed_beer_box_kg']} ‡∏Å‡∏Å., {mixed_beer_box_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['mixed_beer_box_kg']
        total_cost += mixed_beer_box_cost
    
    # –î—Ä—É–≥–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'oil_kg' in user_data:
        oil_cost = user_data.get('oil_kg', 0) * user_data.get('oil_price', 0)
        summary += f"üî∏ Oil: {user_data['oil_kg']} ‡∏Å‡∏Å., {oil_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['oil_kg']
        total_cost += oil_cost
    
    if 'colored_plastic_kg' in user_data:
        colored_plastic_cost = user_data.get('colored_plastic_kg', 0) * user_data.get('colored_plastic_price', 0)
        summary += f"üî∏ Colored Plastic: {user_data['colored_plastic_kg']} ‡∏Å‡∏Å., {colored_plastic_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['colored_plastic_kg']
        total_cost += colored_plastic_cost
    
    if 'iron_kg' in user_data:
        iron_cost = user_data.get('iron_kg', 0) * user_data.get('iron_price', 0)
        summary += f"üî∏ Iron: {user_data['iron_kg']} ‡∏Å‡∏Å., {iron_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['iron_kg']
        total_cost += iron_cost
    
    if 'plastic_bag_kg' in user_data:
        plastic_bag_cost = user_data.get('plastic_bag_kg', 0) * user_data.get('plastic_bag_price', 0)
        summary += f"üî∏ Plastic Bag or Container: {user_data['plastic_bag_kg']} ‡∏Å‡∏Å., {plastic_bag_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['plastic_bag_kg']
        total_cost += plastic_bag_cost
    
    if 'mix_kg' in user_data:
        mix_cost = user_data.get('mix_kg', 0) * user_data.get('mix_price', 0)
        summary += f"üî∏ Mix: {user_data['mix_kg']} ‡∏Å‡∏Å., {mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['mix_kg']
        total_cost += mix_cost
    
    if 'other_kg' in user_data:
        other_cost = user_data.get('other_kg', 0) * user_data.get('other_price', 0)
        summary += f"üî∏ Other: {user_data['other_kg']} ‡∏Å‡∏Å., {other_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"
        total_weight += user_data['other_kg']
        total_cost += other_cost
    
    summary += f"\nüíé ‡∏£‡∏ß‡∏°: {total_weight:.2f} ‡∏Å‡∏Å., {total_cost:.2f} ‡∏ö‡∏≤‡∏ó"  # "üíé –ò—Ç–æ–≥–æ: –∫–≥, —Ä—É–±."
    
    await callback.message.edit_text(summary, reply_markup=get_confirmation_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@admin.callback_query(F.data == "confirm_shipment")
async def confirm_shipment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    try:
        user = await get_user_by_tg_id(callback.from_user.id)
        if not user:
            await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º callback –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        pet_total = user_data.get('pet_kg', 0.0) * user_data.get('pet_price', 0.0)
        paper_total = user_data.get('paper_kg', 0.0) * user_data.get('paper_price', 0.0)
        alum_total = user_data.get('alum_kg', 0.0) * user_data.get('alum_price', 0.0)
        glass_total = user_data.get('glass_kg', 0.0) * user_data.get('glass_price', 0.0)
        small_beer_box_total = user_data.get('small_beer_box_kg', 0.0) * user_data.get('small_beer_box_price', 0.0)
        large_beer_box_total = user_data.get('large_beer_box_kg', 0.0) * user_data.get('large_beer_box_price', 0.0)
        mixed_beer_box_total = user_data.get('mixed_beer_box_kg', 0.0) * user_data.get('mixed_beer_box_price', 0.0)
        oil_total = user_data.get('oil_kg', 0.0) * user_data.get('oil_price', 0.0)
        colored_plastic_total = user_data.get('colored_plastic_kg', 0.0) * user_data.get('colored_plastic_price', 0.0)
        iron_total = user_data.get('iron_kg', 0.0) * user_data.get('iron_price', 0.0)
        plastic_bag_total = user_data.get('plastic_bag_kg', 0.0) * user_data.get('plastic_bag_price', 0.0)
        mix_total = user_data.get('mix_kg', 0.0) * user_data.get('mix_price', 0.0)
        other_total = user_data.get('other_kg', 0.0) * user_data.get('other_price', 0.0)

        # –û–±—â–∞—è —Å—É–º–º–∞
        total_pay = (
            pet_total + paper_total + alum_total + glass_total + 
            small_beer_box_total + large_beer_box_total + mixed_beer_box_total +
            oil_total + colored_plastic_total + iron_total + 
            plastic_bag_total + mix_total + other_total
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
        await add_shipment(
            point_id=user_data['point_id'],
            user_id=user.tg_id,
            pet_kg=user_data.get('pet_kg', 0.0),
            pet_price=user_data.get('pet_price', 0.0),
            pet_total=pet_total,
            paper_kg=user_data.get('paper_kg', 0.0),
            paper_price=user_data.get('paper_price', 0.0),
            paper_total=paper_total,
            alum_kg=user_data.get('alum_kg', 0.0),
            alum_price=user_data.get('alum_price', 0.0),
            alum_total=alum_total,
            glass_kg=user_data.get('glass_kg', 0.0),
            glass_price=user_data.get('glass_price', 0.0),
            glass_total=glass_total,
            small_beer_box_kg=user_data.get('small_beer_box_kg', 0.0),
            small_beer_box_price=user_data.get('small_beer_box_price', 0.0),
            small_beer_box_total=small_beer_box_total,
            large_beer_box_kg=user_data.get('large_beer_box_kg', 0.0),
            large_beer_box_price=user_data.get('large_beer_box_price', 0.0),
            large_beer_box_total=large_beer_box_total,
            mixed_beer_box_kg=user_data.get('mixed_beer_box_kg', 0.0),
            mixed_beer_box_price=user_data.get('mixed_beer_box_price', 0.0),
            mixed_beer_box_total=mixed_beer_box_total,
            oil_kg=user_data.get('oil_kg', 0.0),
            oil_price=user_data.get('oil_price', 0.0),
            oil_total=oil_total,
            colored_plastic_kg=user_data.get('colored_plastic_kg', 0.0),
            colored_plastic_price=user_data.get('colored_plastic_price', 0.0),
            colored_plastic_total=colored_plastic_total,
            iron_kg=user_data.get('iron_kg', 0.0),
            iron_price=user_data.get('iron_price', 0.0),
            iron_total=iron_total,
            plastic_bag_kg=user_data.get('plastic_bag_kg', 0.0),
            plastic_bag_price=user_data.get('plastic_bag_price', 0.0),
            plastic_bag_total=plastic_bag_total,
            mix_kg=user_data.get('mix_kg', 0.0),
            mix_price=user_data.get('mix_price', 0.0),
            mix_total=mix_total,
            other_kg=user_data.get('other_kg', 0.0),
            other_price=user_data.get('other_price', 0.0),
            other_total=other_total,
            total_pay=total_pay
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        await update_bags_count(user_data['point_id'], 0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        point = await get_point_by_id(user_data['point_id'])
        if point:
            point_user = await get_user_by_point_id(user_data['point_id'])
            if point_user:
                total_weight = (
                    user_data.get('pet_kg', 0) +
                    user_data.get('paper_kg', 0) +
                    user_data.get('alum_kg', 0) +
                    user_data.get('glass_kg', 0) +
                    user_data.get('small_beer_box_kg', 0) +
                    user_data.get('large_beer_box_kg', 0) +
                    user_data.get('mixed_beer_box_kg', 0) +
                    user_data.get('oil_kg', 0) +
                    user_data.get('colored_plastic_kg', 0) +
                    user_data.get('iron_kg', 0) +
                    user_data.get('plastic_bag_kg', 0) +
                    user_data.get('mix_kg', 0) +
                    user_data.get('other_kg', 0)
                )
                
                await callback.bot.send_message(
                    user.tg_id,
                    f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\n"
                    f"üì¶ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°: {total_weight:.2f} ‡∏Å‡∏Å.\n"
                    f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: {total_pay:.2f} ‡∏ö‡∏≤‡∏ó\n\n"
                    f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö!"
                )
        
        await callback.message.edit_text(
            '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå',  # "–î–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≥—Ä—É–∑–∫–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤ –æ–±–Ω—É–ª–µ–Ω–æ."
            reply_markup=driver_keyboard()
        )
    except ValueError as e:
        await callback.message.edit_text(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}")
    finally:
        await state.clear()
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@admin.callback_query(F.data == "cancel_shipment")
async def cancel_shipment(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß",  # "‚ùå –û—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞
@admin.callback_query(F.data == "cancel_during_input")
async def cancel_during_input(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö",  # "‚ùå –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω. –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
    )
    await callback.answer()


@admin.callback_query(F.data == "create_point")
async def start_create_point(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    await callback.message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RZZN ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà:\n"  # "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RZZN, –≥–¥–µ:"
        "R - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (1 ‡∏´‡∏•‡∏±‡∏Å)\n"  # "R - –Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ (1 —Ü–∏—Ñ—Ä–∞)"
        "ZZ - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ã‡∏ô (2 ‡∏´‡∏•‡∏±‡∏Å)\n"  # "ZZ - –Ω–æ–º–µ—Ä –∑–æ–Ω—ã (2 —Ü–∏—Ñ—Ä—ã)"
        "N - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô (1 ‡∏´‡∏•‡∏±‡∏Å)\n"  # "N - –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏ –≤ –∑–æ–Ω–µ (1 —Ü–∏—Ñ—Ä–∞)"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1021 - ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ 1 ‡πÇ‡∏ã‡∏ô 02 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1",  # "–ü—Ä–∏–º–µ—Ä: 1021 - —Ç–æ—á–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ 1, –∑–æ–Ω–µ 02, –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏ 1"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.point_id)
    await callback.answer()

@admin.message(CreatePoint.point_id, F.text.regexp(r'^\d{4}$'))
async def process_point_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–æ—á–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    point_id = message.text
    region_id = int(point_id[0])
    zone_num = int(point_id[1:3])
    zone_id = int(f"{region_id}{zone_num:02d}")
    point_num = int(point_id[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º ID
    if await get_point_by_id(point_id):
        await message.answer(
            "‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏≠‡∏∑‡πà‡∏ô",  # "–¢–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID."
            reply_markup=cancel_keyboard()
        )
        return
    
    await state.update_data(
        point_id=point_id,
        region_id=region_id,
        zone_num=zone_num,
        zone_id=zone_id,
        point_num=point_num
    )
    
    await message.answer(
        f"ID ‡∏à‡∏∏‡∏î: {point_id}\n"
        f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: {region_id}\n"
        f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ã‡∏ô: {zone_num}\n"
        f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î: {point_num}\n\n"
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.point_name)

@admin.message(CreatePoint.point_id)
async def process_point_id_invalid(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID —Ç–æ—á–∫–∏"""
    await message.answer(
        "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡∏à‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RZZN\n"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1021 - ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ 1 ‡πÇ‡∏ã‡∏ô 02 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1",  # "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ—á–∫–∏! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ RZZN"
        reply_markup=cancel_keyboard()
    )

@admin.message(CreatePoint.point_name)
async def process_point_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    await state.update_data(point_name=message.text)
    await message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–æ—á–∫–∏:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.point_owner_name)

@admin.message(CreatePoint.point_owner_name)
async def process_owner_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    await state.update_data(point_owner_name=message.text)
    await message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.phone_number)

@admin.message(CreatePoint.phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone_number=message.text)
    await message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.address)

@admin.message(CreatePoint.address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    await state.update_data(address=message.text)
    
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô:\n\n"  # "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        f"ID ‡∏à‡∏∏‡∏î: {data['point_id']}\n"
        f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: {data['region_id']}\n"
        f"‡πÇ‡∏ã‡∏ô: {data['zone_num']}\n"
        f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î: {data['point_num']}\n"
        f"‡∏ä‡∏∑‡πà‡∏≠: {data['point_name']}\n"
        f"‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: {data['point_owner_name']}\n"
        f"‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {data['phone_number']}\n"
        f"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {data['address']}\n\n"
        "‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"  # "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(confirm_text, reply_markup=confirm_keyboard())
    await state.set_state(CreatePoint.confirmation)

@admin.callback_query(CreatePoint.confirmation, F.data == "confirm")
async def confirm_point_creation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    data = await state.get_data()
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω
        if not await get_region_by_id(data['region_id']):
            await add_region(data['region_id'])
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∑–æ–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º zone_id –∏–∑ 3 —Ü–∏—Ñ—Ä)
        if not await get_zone_by_id(data['zone_id']):
            await add_zone(data['zone_id'], data['region_id'])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º point_id –∫–∞–∫ —Å—Ç—Ä–æ–∫—É)
        await add_point(
            point_id=data['point_id'],
            point_name=data['point_name'],
            point_owner_name=data['point_owner_name'],
            phone_number=data['phone_number'],
            address=data['address'],
            bags_count=0,
            zone_id=data['zone_id']
        )
        
        await callback.message.answer(
            "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",  # "‚úÖ –¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
            reply_markup=admin_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î: {str(e)}",  # "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ—á–∫–∏:"
            reply_markup=admin_keyboard()
        )
    finally:
        await state.clear()

@admin.callback_query(CreatePoint.confirmation, F.data == "cancel")
async def cancel_point_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    await callback.message.answer(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î",  # "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        reply_markup=admin_keyboard()
    )
    await state.clear()

@admin.callback_query(StateFilter(CreatePoint), F.data == "cancel_operation")
async def cancel_creation_process(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    await callback.message.answer(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î",  # "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ."
        reply_markup=admin_keyboard()
    )
    await state.clear()



@admin.callback_query(F.data == "delete_point")
async def start_delete_point(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏"""
    await callback.message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö:",  # "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state("delete_point")
    await callback.answer()

@admin.message(F.text.regexp(r'^\d{4}$'), StateFilter("delete_point"))
async def process_delete_point_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    point_id = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
    point = await get_point_by_id(point_id)
    if not point:
        await message.answer(
            "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",  # "–¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID"
            reply_markup=cancel_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ —Ç–æ—á–∫–µ
    user = await get_user_by_point_id(point_id)
    
    confirm_text = (
        "‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ?\n\n"
        f"ID ‡∏à‡∏∏‡∏î: {point_id}\n"
    )
    
    if user:
        confirm_text += f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏ï‡∏¥‡∏î: {user.tg_id}\n"
    
    confirm_text += (
        "\n‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏à‡∏∞:\n"
        "- ‡∏•‡∏ö‡∏à‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö\n"
        "- ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏ï‡∏¥‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n"
        "- ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ\n"
        "- ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÑ‡∏ß‡πâ\n"
        "\n‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"  # "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ?"
    )
    
    await state.update_data(point_id=point_id)
    await message.answer(confirm_text, reply_markup=confirm_keyboard())
    await state.set_state("confirm_delete_point")

@admin.message(StateFilter("delete_point"))
async def process_delete_point_id_invalid(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID —Ç–æ—á–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"""
    await message.answer(
        "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡∏à‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å\n"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1021",
        reply_markup=cancel_keyboard()
    )

@admin.callback_query(StateFilter("confirm_delete_point"), F.data == "confirm")
async def confirm_point_deletion(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏"""
    data = await state.get_data()
    point_id = str(data['point_id'])  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
    
    if await delete_point_and_related_data(point_id):
        await callback.message.answer(
            f"‚úÖ ‡∏à‡∏∏‡∏î {point_id} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!",
            reply_markup=admin_keyboard()
        )
    else:
        await callback.message.answer(
            f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∏‡∏î {point_id}",
            reply_markup=admin_keyboard()
        )
    
    await state.clear()

@admin.callback_query(StateFilter("confirm_delete_point"), F.data == "cancel")
async def cancel_point_deletion(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏"""
    await callback.message.answer(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∏‡∏î",  # "–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        reply_markup=admin_keyboard()
    )
    await state.clear()