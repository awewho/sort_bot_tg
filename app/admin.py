from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart, Command, Filter, StateFilter
from aiogram.fsm.context import FSMContext

import os
from openpyxl import Workbook
from datetime import datetime

from app.database.requests import (
    get_all_points, get_all_zones, get_all_regions, 
    get_points_by_zone, get_zones_by_region,
    get_report_data, get_user_by_tg_id, 
    add_point, add_region, add_zone, 
    get_point_by_id,get_region_by_id,get_zone_by_id, 
    add_shipment, get_user_by_point_id,
    update_bags_count, get_all_requests_sorted,
    get_all_shipments_sorted, get_combined_data_sorted
)
from app.states import Reports, ShipmentStates, CreatePoint
from app.keyboards import (
    report_keyboard, admin_keyboard, driver_keyboard,
    cancel_keyboard, confirm_keyboard, 
    get_cancel_keyboard, get_category_keyboard, get_confirmation_keyboard, 
    get_main_materials_keyboard, get_mix_materials_keyboard,
    get_secondary_materials_keyboard)

ADMIN_IDS = [753755508, 1582399282, 7854337092, 7854337092, 7363212828]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

admin = Router()

class Admin(Filter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id in ADMIN_IDS

@admin.message(Admin(), Command("A1"))
async def admin_start(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await message.answer(
        "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:",  # "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        reply_markup=admin_keyboard()
    )

@admin.callback_query(Admin(), F.data == 'report')
async def cmd_report(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤"""
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:', reply_markup=report_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
    await state.set_state(Reports.report_type)

@admin.callback_query(Admin(), Reports.report_type, F.data == "report_zone")
async def process_zones_report(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –ø–æ –∑–æ–Ω–∞–º"""
    zones = await get_all_zones()
    
    if not zones:
        await callback.message.answer('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô')  # "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–æ–Ω–∞–º."
        return
    
    report_messages = ["‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô:\n\n"]  # "–û—Ç—á–µ—Ç –ø–æ –∑–æ–Ω–∞–º:"
    for zone in zones:
        points = await get_points_by_zone(zone.zone_id)
        total_bags = sum(p.bags_count for p in points) if points else 0
        
        zone_info = (
            f"–ó–æ–Ω–∞ ID: {zone.zone_id}\n"
            f"–†–µ–≥–∏–æ–Ω: {zone.region_id}\n"
            f"–¢–æ—á–µ–∫: {len(points)}\n"
            f"–í—Å–µ–≥–æ –º–µ—à–∫–æ–≤: {total_bags}\n\n"
        )
        
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(report_messages[-1]) + len(zone_info) > 4000:
            report_messages.append(zone_info)
        else:
            report_messages[-1] += zone_info
    
    for msg in report_messages:
        await callback.message.answer(msg)
    
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', reply_markup=admin_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

@admin.callback_query(Admin(), Reports.report_type, F.data == "report_region")
async def process_regions_report(callback: CallbackQuery):
    """–û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"""
    regions = await get_all_regions()
    
    if not regions:
        await callback.message.answer('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ')  # "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º."
        return
    
    report_messages = ["‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ:\n\n"]  # "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:"
    for region in regions:
        zones = await get_zones_by_region(region.region_id)
        zone_count = len(zones)
        point_count = 0
        total_bags = 0
        
        for zone in zones:
            points = await get_points_by_zone(zone.zone_id)
            point_count += len(points)
            total_bags += sum(p.bags_count for p in points)
        
        region_info = (
            f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ID: {region.region_id}\n"  # "–†–µ–≥–∏–æ–Ω ID:"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ã‡∏ô: {zone_count}\n"  # "–ó–æ–Ω:"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î: {point_count}\n"  # "–¢–æ—á–µ–∫:"
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_bags}\n\n"  # "–í—Å–µ–≥–æ –º–µ—à–∫–æ–≤:"
        )
        
        if len(report_messages[-1]) + len(region_info) > 4000:
            report_messages.append(region_info)
        else:
            report_messages[-1] += region_info
    
    for msg in report_messages:
        await callback.message.answer(msg)
    
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', reply_markup=admin_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

@admin.callback_query(Admin(), Reports.report_type, F.data == "report_region_detail")
async def ask_region_id(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:")  # "–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞:"
    await state.set_state(Reports.waiting_region_id)

@admin.message(Admin(), Reports.waiting_region_id)
async def generate_region_detail_report(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    try:
        region_id = int(message.text.strip())
    except ValueError:
        await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")  # "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Ä–µ–≥–∏–æ–Ω–∞."
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    region = await get_region_by_id(region_id)
    if not region:
        await message.answer(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ID {region_id}")  # f"–†–µ–≥–∏–æ–Ω —Å ID {region_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–æ–Ω—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ
    zones = await get_zones_by_region(region_id)
    if not zones:
        await message.answer(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ã‡∏ô‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ {region_id}")  # f"–í —Ä–µ–≥–∏–æ–Ω–µ {region_id} –Ω–µ—Ç –∑–æ–Ω."
        await state.clear()
        return
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    total_points = 0
    total_bags = 0
    zones_data = []
    
    for zone in zones:
        points = await get_points_by_zone(zone.zone_id)
        zone_points = len(points)
        zone_bags = sum(p.bags_count for p in points) if points else 0
        
        total_points += zone_points
        total_bags += zone_bags
        
        if zone_points > 0:
            zones_data.append((zone.zone_id, zone_points, zone_bags))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞
    header = (
        f"üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ {region_id}:\n"  # f"üìä –û—Ç—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω—É {region_id}:"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_points}\n"  # f"–í—Å–µ–≥–æ —Ç–æ—á–µ–∫: {total_points}"
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_bags}\n\n"  # f"–í—Å–µ–≥–æ –º–µ—à–∫–æ–≤ –≥–æ—Ç–æ–≤–æ: {total_bags}"
        f"‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô:\n"  # f"–î–µ—Ç–∞–ª–∏ –ø–æ –∑–æ–Ω–∞–º:"
    )
    
    report_messages = [header]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–æ–Ω–∞–º
    for zone_id, zone_points, zone_bags in zones_data:
        zone_info = f"‚ñ™Ô∏è ‡πÇ‡∏ã‡∏ô {zone_id} - {zone_points} ‡∏à‡∏∏‡∏î ({zone_bags} ‡∏ñ‡∏∏‡∏á)\n"  # f"‚ñ™Ô∏è –ó–æ–Ω–∞ {zone_id} - {zone_points} —Ç–æ—á–µ–∫ ({zone_bags} –º–µ—à–∫–æ–≤)"
        
        if len(report_messages[-1]) + len(zone_info) > 4000:
            report_messages.append(zone_info)
        else:
            report_messages[-1] += zone_info
    
    for msg in report_messages:
        await message.answer(msg)
    
    await message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:', reply_markup=admin_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await state.clear()

@admin.callback_query(Admin(), F.data == "generate_log_report")
async def generate_log_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-–æ—Ç—á–µ—Ç–∞ —Å —Ç—Ä–µ–º—è –ª–∏—Å—Ç–∞–º–∏: –∑–∞—è–≤–∫–∏, –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    requests = await get_all_requests_sorted()
    shipments = await get_all_shipments_sorted()
    combined = await get_combined_data_sorted()
    
    if not requests and not shipments:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        return
    
    wb = Workbook()
    if "Sheet" in wb.sheetnames:
        del wb["Sheet"]
    
    # 1. –õ–∏—Å—Ç —Å –∑–∞—è–≤–∫–∞–º–∏ (—Ç–∞–π—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if requests:
        ws_requests = wb.create_sheet("Requests")
        headers_requests = [
            "Date", 
            "Point ID", 
            "User ID", 
            "Activity Type",
            "PET Bags", 
            "Aluminum Bags", 
            "Glass Bags", 
            "Other Bags",
            "Total Quantity"
        ]
        ws_requests.append(headers_requests)
        
        for req in requests:
            ws_requests.append([
                req.timestamp.strftime('%Y-%m-%d %H:%M'),
                req.point_id,
                req.user_id,
                req.activity,
                req.pet_bag or 0,
                req.aluminum_bag or 0,
                req.glass_bag or 0,
                req.other or 0,
                (req.pet_bag or 0) + (req.aluminum_bag or 0) + 
                (req.glass_bag or 0) + (req.other or 0)
            ])
    
    # 2. –õ–∏—Å—Ç —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏ (—Ç–∞–π—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if shipments:
        ws_shipments = wb.create_sheet("Shipments")
        headers_shipments = [
            "Date", 
            "Point ID", 
            "Driver ID", 
            "Total Payment",
            # PET
            "PET kg", "PET Price", "PET Total",
            # –ê–ª—é–º–∏–Ω–∏–π
            "Aluminum kg", "Aluminum Price", "Aluminum Total",
            # –°—Ç–µ–∫–ª–æ
            "Glass kg", "Glass Price", "Glass Total",
            # –ë—É–º–∞–≥–∞
            "Paper kg", "Paper Price", "Paper Total",
            # –ú–µ—Ç–∞–ª–ª
            "Metal kg", "Metal Price", "Metal Total",
            # –ú–∞—Å–ª–æ
            "Oil kg", "Oil Price", "Oil Total",
            # –î—Ä—É–≥–æ–µ
            "Other kg", "Other Price", "Other Total",
            # –°–º–µ—Å–∏
            "Alum+Plastic kg", "Alum+Plastic Price", "Alum+Plastic Total",
            "Alum+Plastic+Glass kg", "Alum+Plastic+Glass Price", "Alum+Plastic+Glass Total",
            "Alum+Iron kg", "Alum+Iron Price", "Alum+Iron Total",
            "PET Mix kg", "PET Mix Price", "PET Mix Total",
            "Other Mix kg", "Other Mix Price", "Other Mix Total"
        ]
        ws_shipments.append(headers_shipments)
        
        for ship in shipments:
            ws_shipments.append([
                ship.timestamp.strftime('%Y-%m-%d %H:%M'),
                ship.point_id,
                ship.user_id,
                ship.total_pay,
                ship.pet_kg, ship.pet_price, ship.pet_total,
                ship.alum_kg, ship.alum_price, ship.alum_total,
                ship.glass_kg, ship.glass_price, ship.glass_total,
                ship.paper_kg, ship.paper_price, ship.paper_total,
                ship.metal_kg, ship.metal_price, ship.metal_total,
                ship.oil_kg, ship.oil_price, ship.oil_total,
                ship.other_kg, ship.other_price, ship.other_total,
                ship.alum_pl_mix_kg, ship.alum_pl_mix_price, ship.alum_pl_mix_total,
                ship.alum_pl_glass_mix_kg, ship.alum_pl_glass_mix_price, ship.alum_pl_glass_mix_total,
                ship.alum_iron_cans_mix_kg, ship.alum_iron_cans_mix_price, ship.alum_iron_cans_mix_total,
                ship.pet_mix_kg, ship.pet_mix_price, ship.pet_mix_total,
                ship.other_mix_kg, ship.other_mix_price, ship.other_mix_total
            ])
    
    # 3. –û–±—â–∏–π –ª–∏—Å—Ç (—Ç–∞–π—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
    if combined:
        ws_combined = wb.create_sheet("All Data")
        headers_combined = [
            "Type", 
            "Date", 
            "Point ID", 
            "User ID",
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            "PET (Bags/kg)", "PET Price", "PET Total",
            "Aluminum (Bags/kg)", "Aluminum Price", "Aluminum Total",
            "Glass (Bags/kg)", "Glass Price", "Glass Total",
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            "Paper kg", "Paper Price", "Paper Total",
            "Metal kg", "Metal Price", "Metal Total",
            "Oil kg", "Oil Price", "Oil Total",
            "Other kg", "Other Price", "Other Total",
            # –°–º–µ—Å–∏
            "Alum+Plastic kg", "Alum+Plastic Price", "Alum+Plastic Total",
            "Alum+Plastic+Glass kg", "Alum+Plastic+Glass Price", "Alum+Plastic+Glass Total",
            "Alum+Iron kg", "Alum+Iron Price", "Alum+Iron Total",
            "PET Mix kg", "‡∏£PET Mix Price", "PET Mix Total",
            "Other Mix kg", "Other Mix Price", "Other Mix Total",
            # –ò—Ç–æ–≥–∏
            "Total Amount", 
            "Activity Type (for requests)"
        ]
        ws_combined.append(headers_combined)
        
        for item in combined:
            if item["type"] == "request":
                row = [
                    "Request",
                    item["timestamp"].strftime('%Y-%m-%d %H:%M'),
                    item["point_id"],
                    item["user_id"],
                    item["total"],
                    item["activity"],
                    "",
                    *([""] * 33)
                ]
            else:
                row = [
                    "Shipment",
                    item["timestamp"].strftime('%Y-%m-%d %H:%M'),
                    item["point_id"],
                    item["user_id"],
                    # PET
                    item["pet_kg"], item["pet_price"], item["pet_total"],
                    # –ê–ª—é–º–∏–Ω–∏–π
                    item["alum_kg"], item["alum_price"], item["alum_total"],
                    # –°—Ç–µ–∫–ª–æ
                    item["glass_kg"], item["glass_price"], item["glass_total"],
                    # –ë—É–º–∞–≥–∞
                    item["paper_kg"], item["paper_price"], item["paper_total"],
                    # –ú–µ—Ç–∞–ª–ª
                    item["metal_kg"], item["metal_price"], item["metal_total"],
                    # –ú–∞—Å–ª–æ
                    item["oil_kg"], item["oil_price"], item["oil_total"],
                    # –î—Ä—É–≥–æ–µ
                    item["other_kg"], item["other_price"], item["other_total"],
                    # –°–º–µ—Å–∏
                    item["alum_pl_mix_kg"], item["alum_pl_mix_price"], item["alum_pl_mix_total"],
                    item["alum_pl_glass_mix_kg"], item["alum_pl_glass_mix_price"], item["alum_pl_glass_mix_total"],
                    item["alum_iron_cans_mix_kg"], item["alum_iron_cans_mix_price"], item["alum_iron_cans_mix_total"],
                    item["pet_mix_kg"], item["pet_mix_price"], item["pet_mix_total"],
                    item["other_mix_kg"], item["other_mix_price"], item["other_mix_total"],
                    # –ò—Ç–æ–≥–∏
                    item["total_pay"],
                    ""
                ]
            ws_combined.append(row)
    
    filename = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    wb.save(filename)
    await callback.message.answer_document(FSInputFile(filename), reply_markup=admin_keyboard())
    os.remove(filename)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
@admin.message(Command('D1'))
async def cmd_driver(message: Message):
    await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:", reply_markup=driver_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

@admin.callback_query(F.data == "add_shipment")
async def process_add_shipment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏à‡∏∏‡∏î:')  # "–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏:"
    await state.set_state(ShipmentStates.point_id)
    await callback.answer()

@admin.message(ShipmentStates.point_id)
async def process_point_id(message: Message, state: FSMContext):
    try:
        point_id = int(message.text)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
        point = await get_point_by_id(point_id)
        if not point:
            await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ—á–∫–∏ –∑–∞–Ω–æ–≤–æ."
            return
            
        await state.update_data(point_id=point_id)
        await message.answer('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:', reply_markup=get_category_keyboard()) #–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ID ‡∏à‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ï‡πá‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà") #–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ—á–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@admin.callback_query(F.data == "category_main")
async def select_main_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏:", reply_markup=get_main_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "category_secondary")
async def select_secondary_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏:", reply_markup=get_secondary_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "category_mix")
async def select_mix_materials(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ú‡∏™‡∏°:", reply_markup=get_mix_materials_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ—à–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:"
    await callback.answer()

@admin.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:", reply_markup=get_category_keyboard())  # "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@admin.callback_query(F.data == "material_alum")
async def process_alum_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏° (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∞–ª—é–º–∏–Ω–∏—è (–∫–≥):"
    await state.set_state(ShipmentStates.alum_kg)
    await callback.answer()

@admin.message(ShipmentStates.alum_kg)
async def process_alum_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        alum_kg = float(text)
        if alum_kg < 0:
            raise ValueError
        await state.update_data(alum_kg=alum_kg)
        
        if alum_kg == 0:
            await state.update_data(alum_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å –∞–ª—é–º–∏–Ω–∏—è —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ –∞–ª—é–º–∏–Ω–∏—è:"
            await state.set_state(ShipmentStates.alum_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.alum_price)
async def process_alum_price(message: Message, state: FSMContext):
    try:
        alum_price = float(message.text)
        if alum_price < 0:
            raise ValueError
        await state.update_data(alum_price=alum_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ –∞–ª—é–º–∏–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è PET (–ø–ª–∞—Å—Ç–∏–∫–∞)
@admin.callback_query(F.data == "material_pet")
async def process_pet_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å PET (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å PET (–∫–≥):"
    await state.set_state(ShipmentStates.pet_kg)
    await callback.answer()

@admin.message(ShipmentStates.pet_kg)
async def process_pet_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        pet_kg = float(text)
        if pet_kg < 0:
            raise ValueError
        await state.update_data(pet_kg=pet_kg)
        
        if pet_kg == 0:
            await state.update_data(pet_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å PET ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å PET —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. PET:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ PET:"
            await state.set_state(ShipmentStates.pet_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.pet_price)
async def process_pet_price(message: Message, state: FSMContext):
    try:
        pet_price = float(message.text)
        if pet_price < 0:
            raise ValueError
        await state.update_data(pet_price=pet_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PET ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ PET —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–µ–∫–ª–∞
@admin.callback_query(F.data == "material_glass")
async def process_glass_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏Å‡πâ‡∏ß (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Å—Ç–µ–∫–ª–∞ (–∫–≥):"
    await state.set_state(ShipmentStates.glass_kg)
    await callback.answer()

@admin.message(ShipmentStates.glass_kg)
async def process_glass_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        glass_kg = float(text)
        if glass_kg < 0:
            raise ValueError
        await state.update_data(glass_kg=glass_kg)
        
        if glass_kg == 0:
            await state.update_data(glass_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å —Å—Ç–µ–∫–ª–∞ —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡πÅ‡∏Å‡πâ‡∏ß:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ —Å—Ç–µ–∫–ª–∞:"
            await state.set_state(ShipmentStates.glass_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.glass_price)
async def process_glass_price(message: Message, state: FSMContext):
    try:
        glass_price = float(message.text)
        if glass_price < 0:
            raise ValueError
        await state.update_data(glass_price=glass_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–µ–∫–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±—É–º–∞–≥–∏
@admin.callback_query(F.data == "material_paper")
async def process_paper_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –±—É–º–∞–≥–∏ (–∫–≥):"
    await state.set_state(ShipmentStates.paper_kg)
    await callback.answer()

@admin.message(ShipmentStates.paper_kg)
async def process_paper_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        paper_kg = float(text)
        if paper_kg < 0:
            raise ValueError
        await state.update_data(paper_kg=paper_kg)
        
        if paper_kg == 0:
            await state.update_data(paper_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å –±—É–º–∞–≥–∏ —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ –±—É–º–∞–≥–∏:"
            await state.set_state(ShipmentStates.paper_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.paper_price)
async def process_paper_price(message: Message, state: FSMContext):
    try:
        paper_price = float(message.text)
        if paper_price < 0:
            raise ValueError
        await state.update_data(paper_price=paper_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ –±—É–º–∞–≥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ—Ç–∞–ª–ª–∞
@admin.callback_query(F.data == "material_metal")
async def process_metal_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏•‡∏´‡∏∞ (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –º–µ—Ç–∞–ª–ª–∞ (–∫–≥):"
    await state.set_state(ShipmentStates.metal_kg)
    await callback.answer()

@admin.message(ShipmentStates.metal_kg)
async def process_metal_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        metal_kg = float(text)
        if metal_kg < 0:
            raise ValueError
        await state.update_data(metal_kg=metal_kg)
        
        if metal_kg == 0:
            await state.update_data(metal_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏•‡∏´‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å –º–µ—Ç–∞–ª–ª–∞ —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡πÇ‡∏•‡∏´‡∏∞:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ –º–µ—Ç–∞–ª–ª–∞:"
            await state.set_state(ShipmentStates.metal_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.metal_price)
async def process_metal_price(message: Message, state: FSMContext):
    try:
        metal_price = float(message.text)
        if metal_price < 0:
            raise ValueError
        await state.update_data(metal_price=metal_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏•‡∏´‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Ç–∞–ª–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å–ª–∞
@admin.callback_query(F.data == "material_oil")
async def process_oil_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –º–∞—Å–ª–∞ (–∫–≥):"
    await state.set_state(ShipmentStates.oil_kg)
    await callback.answer()

@admin.message(ShipmentStates.oil_kg)
async def process_oil_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        oil_kg = float(text)
        if oil_kg < 0:
            raise ValueError
        await state.update_data(oil_kg=oil_kg)
        
        if oil_kg == 0:
            await state.update_data(oil_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å –º–∞—Å–ª–∞ —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ –º–∞—Å–ª–∞:"
            await state.set_state(ShipmentStates.oil_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.oil_price)
async def process_oil_price(message: Message, state: FSMContext):
    try:
        oil_price = float(message.text)
        if oil_price < 0:
            raise ValueError
        await state.update_data(oil_price=oil_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Å–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@admin.callback_query(F.data == "material_other")
async def process_other_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏Å‡∏Å.):")  # "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–≥):"
    await state.set_state(ShipmentStates.other_kg)
    await callback.answer()

@admin.message(ShipmentStates.other_kg)
async def process_other_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        other_kg = float(text)
        if other_kg < 0:
            raise ValueError
        await state.update_data(other_kg=other_kg)
        
        if other_kg == 0:
            await state.update_data(other_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())  # "–í–µ—Å –ø—Ä–æ—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ä–∞–≤–µ–Ω 0."
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏∑‡πà‡∏ô‡πÜ:")  # "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–≥ –ø—Ä–æ—á–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"
            await state.set_state(ShipmentStates.other_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∑–∞–Ω–æ–≤–æ:"

@admin.message(ShipmentStates.other_price)
async def process_other_price(message: Message, state: FSMContext):
    try:
        other_price = float(message.text)
        if other_price < 0:
            raise ValueError
        await state.update_data(other_price=other_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())  # "–î–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—á–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")  # "–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"

        
        
# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
MIX_PRICES = {
    'alum_pl_mix': 8.0,        # ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å
    'alum_pl_glass_mix': 2.0,  # ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß
    'alum_iron_cans_mix': 3.0, # ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å
    'pet_mix': 5.0,            # ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏°
    'other_mix': 1.0           # ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏°
}


# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
MIX_PRICES = {
    'alum_pl_mix': 8.0,        # ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å
    'alum_pl_glass_mix': 2.0,  # ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß
    'alum_iron_cans_mix': 3.0, # ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å
    'pet_mix': 5.0,            # ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏°
    'other_mix': 1.0           # ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏°
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–ª—é–º-–ø–ª–∞—Å—Ç–∏–∫–∞
@admin.callback_query(F.data == "material_alum_pl_mix")
async def process_alum_pl_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.alum_pl_mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.alum_pl_mix_kg)
async def process_alum_pl_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        alum_pl_mix_kg = float(text)
        if alum_pl_mix_kg < 0:
            raise ValueError
        await state.update_data(alum_pl_mix_kg=alum_pl_mix_kg)
        
        if alum_pl_mix_kg == 0:
            await state.update_data(alum_pl_mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å:")
            await state.set_state(ShipmentStates.alum_pl_mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.alum_pl_mix_price)
async def process_alum_pl_mix_price(message: Message, state: FSMContext):
    try:
        alum_pl_mix_price = float(message.text)
        if alum_pl_mix_price < 0:
            raise ValueError
        await state.update_data(alum_pl_mix_price=alum_pl_mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–ª—é–º-–ø–ª–∞—Å—Ç–∏–∫-—Å—Ç–µ–∫–ª–æ
@admin.callback_query(F.data == "material_alum_pl_glass_mix")
async def process_alum_pl_glass_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.alum_pl_glass_mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.alum_pl_glass_mix_kg)
async def process_alum_pl_glass_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        alum_pl_glass_mix_kg = float(text)
        if alum_pl_glass_mix_kg < 0:
            raise ValueError
        await state.update_data(alum_pl_glass_mix_kg=alum_pl_glass_mix_kg)
        
        if alum_pl_glass_mix_kg == 0:
            await state.update_data(alum_pl_glass_mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß:")
            await state.set_state(ShipmentStates.alum_pl_glass_mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.alum_pl_glass_mix_price)
async def process_alum_pl_glass_mix_price(message: Message, state: FSMContext):
    try:
        alum_pl_glass_mix_price = float(message.text)
        if alum_pl_glass_mix_price < 0:
            raise ValueError
        await state.update_data(alum_pl_glass_mix_price=alum_pl_glass_mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–ª—é–º-–∂–µ–ª–µ–∑–Ω—ã–µ –±–∞–Ω–∫–∏
@admin.callback_query(F.data == "material_alum_iron_cans_mix")
async def process_alum_iron_cans_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.alum_iron_cans_mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.alum_iron_cans_mix_kg)
async def process_alum_iron_cans_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        alum_iron_cans_mix_kg = float(text)
        if alum_iron_cans_mix_kg < 0:
            raise ValueError
        await state.update_data(alum_iron_cans_mix_kg=alum_iron_cans_mix_kg)
        
        if alum_iron_cans_mix_kg == 0:
            await state.update_data(alum_iron_cans_mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å:")
            await state.set_state(ShipmentStates.alum_iron_cans_mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.alum_iron_cans_mix_price)
async def process_alum_iron_cans_mix_price(message: Message, state: FSMContext):
    try:
        alum_iron_cans_mix_price = float(message.text)
        if alum_iron_cans_mix_price < 0:
            raise ValueError
        await state.update_data(alum_iron_cans_mix_price=alum_iron_cans_mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Å—Ç–∏–∫–∞
@admin.callback_query(F.data == "material_pet_mix")
async def process_pet_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏° (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.pet_mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.pet_mix_kg)
async def process_pet_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        pet_mix_kg = float(text)
        if pet_mix_kg < 0:
            raise ValueError
        await state.update_data(pet_mix_kg=pet_mix_kg)
        
        if pet_mix_kg == 0:
            await state.update_data(pet_mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏°‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏°:")
            await state.set_state(ShipmentStates.pet_mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.pet_mix_price)
async def process_pet_mix_price(message: Message, state: FSMContext):
    try:
        pet_mix_price = float(message.text)
        if pet_mix_price < 0:
            raise ValueError
        await state.update_data(pet_mix_price=pet_mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—á–µ–≥–æ –º–∏–∫—Å–∞
@admin.callback_query(F.data == "material_other_mix")
async def process_other_mix_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏° (‡∏Å‡∏Å.):")
    await state.set_state(ShipmentStates.other_mix_kg)
    await callback.answer()

@admin.message(ShipmentStates.other_mix_kg)
async def process_other_mix_kg(message: Message, state: FSMContext):
    try:
        text = message.text.replace(',', '.').strip()
        other_mix_kg = float(text)
        if other_mix_kg < 0:
            raise ValueError
        await state.update_data(other_mix_kg=other_mix_kg)
        
        if other_mix_kg == 0:
            await state.update_data(other_mix_price=0.0)
            await message.answer("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏°‡πÄ‡∏õ‡πá‡∏ô 0", reply_markup=get_category_keyboard())
        else:
            await message.answer("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏Å. ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏°:")
            await state.set_state(ShipmentStates.other_mix_price)
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

@admin.message(ShipmentStates.other_mix_price)
async def process_other_mix_price(message: Message, state: FSMContext):
    try:
        other_mix_price = float(message.text)
        if other_mix_price < 0:
            raise ValueError
        await state.update_data(other_mix_price=other_mix_price)
        await message.answer("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", reply_markup=get_category_keyboard())
    except ValueError:
        await message.answer("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ö‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
@admin.callback_query(F.data == "finish_shipment")
async def finish_shipment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
    summary = "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:\n\n"  # "üìã –°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–≥—Ä—É–∑–∫–µ:"
    total_weight = 0
    total_cost = 0
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'alum_kg' in user_data:
        alum_cost = user_data.get('alum_kg', 0) * user_data.get('alum_price', 0)
        summary += f"üîπ ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: {user_data['alum_kg']} ‡∏Å‡∏Å., {alum_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üîπ –ê–ª—é–º–∏–Ω–∏–π: –∫–≥, —Ä—É–±."
        total_weight += user_data['alum_kg']
        total_cost += alum_cost
    
    if 'pet_kg' in user_data:
        pet_cost = user_data.get('pet_kg', 0) * user_data.get('pet_price', 0)
        summary += f"üîπ ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å (PET): {user_data['pet_kg']} ‡∏Å‡∏Å., {pet_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üîπ –ü–ª–∞—Å—Ç–∏–∫ (PET):"
        total_weight += user_data['pet_kg']
        total_cost += pet_cost
    
    if 'glass_kg' in user_data:
        glass_cost = user_data.get('glass_kg', 0) * user_data.get('glass_price', 0)
        summary += f"üîπ ‡πÅ‡∏Å‡πâ‡∏ß: {user_data['glass_kg']} ‡∏Å‡∏Å., {glass_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üîπ –°—Ç–µ–∫–ª–æ:"
        total_weight += user_data['glass_kg']
        total_cost += glass_cost
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'paper_kg' in user_data:
        paper_cost = user_data.get('paper_kg', 0) * user_data.get('paper_price', 0)
        summary += f"üî∏ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©: {user_data['paper_kg']} ‡∏Å‡∏Å., {paper_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∏ –ë—É–º–∞–≥–∞:"
        total_weight += user_data['paper_kg']
        total_cost += paper_cost
    
    if 'metal_kg' in user_data:
        metal_cost = user_data.get('metal_kg', 0) * user_data.get('metal_price', 0)
        summary += f"üî∏ ‡πÇ‡∏•‡∏´‡∏∞: {user_data['metal_kg']} ‡∏Å‡∏Å., {metal_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∏ –ú–µ—Ç–∞–ª–ª:"
        total_weight += user_data['metal_kg']
        total_cost += metal_cost
    
    if 'oil_kg' in user_data:
        oil_cost = user_data.get('oil_kg', 0) * user_data.get('oil_price', 0)
        summary += f"üî∏ ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: {user_data['oil_kg']} ‡∏Å‡∏Å., {oil_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∏ –ú–∞—Å–ª–æ:"
        total_weight += user_data['oil_kg']
        total_cost += oil_cost
    
    if 'other_kg' in user_data:
        other_cost = user_data.get('other_kg', 0) * user_data.get('other_price', 0)
        summary += f"üî∏ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ: {user_data['other_kg']} ‡∏Å‡∏Å., {other_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∏ –ü—Ä–æ—á–∏–µ:"
        total_weight += user_data['other_kg']
        total_cost += other_cost
    
    # –°–º–µ—à–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    if 'alum_pl_mix_kg' in user_data:
        alum_pl_mix_cost = user_data.get('alum_pl_mix_kg', 0) * user_data.get('alum_pl_mix_price', 0)
        summary += f"üî∫ ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å: {user_data['alum_pl_mix_kg']} ‡∏Å‡∏Å., {alum_pl_mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∫ –ê–ª—é–º-–ø–ª–∞—Å—Ç–∏–∫:"
        total_weight += user_data['alum_pl_mix_kg']
        total_cost += alum_pl_mix_cost
    
    if 'alum_pl_glass_mix_kg' in user_data:
        alum_pl_glass_mix_cost = user_data.get('alum_pl_glass_mix_kg', 0) * user_data.get('alum_pl_glass_mix_price', 0)
        summary += f"üî∫ ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å+‡πÅ‡∏Å‡πâ‡∏ß: {user_data['alum_pl_glass_mix_kg']} ‡∏Å‡∏Å., {alum_pl_glass_mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∫ –ê–ª—é–º-–ø–ª–∞—Å—Ç–∏–∫-—Å—Ç–µ–∫–ª–æ:"
        total_weight += user_data['alum_pl_glass_mix_kg']
        total_cost += alum_pl_glass_mix_cost
    
    if 'alum_iron_cans_mix_kg' in user_data:
        alum_iron_cans_mix_cost = user_data.get('alum_iron_cans_mix_kg', 0) * user_data.get('alum_iron_cans_mix_price', 0)
        summary += f"üî∫ ‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°+‡∏Å‡∏£‡∏∞‡∏õ‡πã‡∏≠‡∏á‡πÄ‡∏´‡∏•‡πá‡∏Å: {user_data['alum_iron_cans_mix_kg']} ‡∏Å‡∏Å., {alum_iron_cans_mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∫ –ê–ª—é–º-–∂–µ–ª–µ–∑–Ω—ã–µ –±–∞–Ω–∫–∏:"
        total_weight += user_data['alum_iron_cans_mix_kg']
        total_cost += alum_iron_cans_mix_cost
    
    if 'pet_mix_kg' in user_data:
        pet_mix_cost = user_data.get('pet_mix_kg', 0) * user_data.get('pet_mix_price', 0)
        summary += f"üî∫ ‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ú‡∏™‡∏°: {user_data['pet_mix_kg']} ‡∏Å‡∏Å., {pet_mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∫ –°–º–µ—à–∞–Ω–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫:"
        total_weight += user_data['pet_mix_kg']
        total_cost += pet_mix_cost
    
    if 'other_mix_kg' in user_data:
        other_mix_cost = user_data.get('other_mix_kg', 0) * user_data.get('other_mix_price', 0)
        summary += f"üî∫ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ú‡∏™‡∏°: {user_data['other_mix_kg']} ‡∏Å‡∏Å., {other_mix_cost:.2f} ‡∏ö‡∏≤‡∏ó\n"  # "üî∫ –ü—Ä–æ—á–∏–π –º–∏–∫—Å:"
        total_weight += user_data['other_mix_kg']
        total_cost += other_mix_cost
    
    summary += f"\nüíé ‡∏£‡∏ß‡∏°: {total_weight:.2f} ‡∏Å‡∏Å., {total_cost:.2f} ‡∏ö‡∏≤‡∏ó"  # "üíé –ò—Ç–æ–≥–æ: –∫–≥, —Ä—É–±."
    
    await callback.message.edit_text(summary, reply_markup=get_confirmation_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@admin.callback_query(F.data == "confirm_shipment")
async def confirm_shipment(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    
    try:
        user = await get_user_by_tg_id(callback.from_user.id)
        if not user:
            await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º callback –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        alum_total = user_data.get('alum_kg', 0.0) * user_data.get('alum_price', 0.0)
        pet_total = user_data.get('pet_kg', 0.0) * user_data.get('pet_price', 0.0)
        glass_total = user_data.get('glass_kg', 0.0) * user_data.get('glass_price', 0.0)
        paper_total = user_data.get('paper_kg', 0.0) * user_data.get('paper_price', 0.0)
        metal_total = user_data.get('metal_kg', 0.0) * user_data.get('metal_price', 0.0)
        oil_total = user_data.get('oil_kg', 0.0) * user_data.get('oil_price', 0.0)
        other_total = user_data.get('other_kg', 0.0) * user_data.get('other_price', 0.0)
        alum_pl_mix_total = user_data.get('alum_pl_mix_kg', 0.0) * user_data.get('alum_pl_mix_price', 0.0)
        alum_pl_glass_mix_total = user_data.get('alum_pl_glass_mix_kg', 0.0) * user_data.get('alum_pl_glass_mix_price', 0.0)
        alum_iron_cans_mix_total = user_data.get('alum_iron_cans_mix_kg', 0.0) * user_data.get('alum_iron_cans_mix_price', 0.0)
        pet_mix_total = user_data.get('pet_mix_kg', 0.0) * user_data.get('pet_mix_price', 0.0)
        other_mix_total = user_data.get('other_mix_kg', 0.0) * user_data.get('other_mix_price', 0.0)

        # –û–±—â–∞—è —Å—É–º–º–∞
        total_pay = (
            alum_total + pet_total + glass_total + paper_total + 
            metal_total + oil_total + other_total + alum_pl_mix_total + 
            alum_pl_glass_mix_total + alum_iron_cans_mix_total + 
            pet_mix_total + other_mix_total
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≥—Ä—É–∑–∫—É —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
        await add_shipment(
            point_id=user_data['point_id'],
            user_id=user.tg_id,
            alum_kg=user_data.get('alum_kg', 0.0),
            alum_price=user_data.get('alum_price', 0.0),
            alum_total=alum_total,
            pet_kg=user_data.get('pet_kg', 0.0),
            pet_price=user_data.get('pet_price', 0.0),
            pet_total=pet_total,
            glass_kg=user_data.get('glass_kg', 0.0),
            glass_price=user_data.get('glass_price', 0.0),
            glass_total=glass_total,
            paper_kg=user_data.get('paper_kg', 0.0),
            paper_price=user_data.get('paper_price', 0.0),
            paper_total=paper_total,
            metal_kg=user_data.get('metal_kg', 0.0),
            metal_price=user_data.get('metal_price', 0.0),
            metal_total=metal_total,
            oil_kg=user_data.get('oil_kg', 0.0),
            oil_price=user_data.get('oil_price', 0.0),
            oil_total=oil_total,
            other_kg=user_data.get('other_kg', 0.0),
            other_price=user_data.get('other_price', 0.0),
            other_total=other_total,
            alum_pl_mix_kg=user_data.get('alum_pl_mix_kg', 0.0),
            alum_pl_mix_price=user_data.get('alum_pl_mix_price', 0.0),
            alum_pl_mix_total=alum_pl_mix_total,
            alum_pl_glass_mix_kg=user_data.get('alum_pl_glass_mix_kg', 0.0),
            alum_pl_glass_mix_price=user_data.get('alum_pl_glass_mix_price', 0.0),
            alum_pl_glass_mix_total=alum_pl_glass_mix_total,
            alum_iron_cans_mix_kg=user_data.get('alum_iron_cans_mix_kg', 0.0),
            alum_iron_cans_mix_price=user_data.get('alum_iron_cans_mix_price', 0.0),
            alum_iron_cans_mix_total=alum_iron_cans_mix_total,
            pet_mix_kg=user_data.get('pet_mix_kg', 0.0),
            pet_mix_price=user_data.get('pet_mix_price', 0.0),
            pet_mix_total=pet_mix_total,
            other_mix_kg=user_data.get('other_mix_kg', 0.0),
            other_mix_price=user_data.get('other_mix_price', 0.0),
            other_mix_total=other_mix_total,
            total_pay=total_pay
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        await update_bags_count(user_data['point_id'], 0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        point = await get_point_by_id(user_data['point_id'])
        if point:
            point_user = await get_user_by_point_id(user_data['point_id'])
            if point_user:
                total_weight = (
                    user_data.get('alum_kg', 0) +
                    user_data.get('pet_kg', 0) +
                    user_data.get('glass_kg', 0) +
                    user_data.get('paper_kg', 0) +
                    user_data.get('metal_kg', 0) +
                    user_data.get('oil_kg', 0) +
                    user_data.get('other_kg', 0) +
                    user_data.get('alum_pl_mix_kg', 0) +
                    user_data.get('alum_pl_glass_mix_kg', 0) +
                    user_data.get('alum_iron_cans_mix_kg', 0) +
                    user_data.get('pet_mix_kg', 0) +
                    user_data.get('other_mix_kg', 0)
                )
                
                await callback.bot.send_message(
                    user.tg_id,
                    f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß\n\n"  # "–í–∞—à –º–µ—à–æ–∫ —Å –º—É—Å–æ—Ä–æ–º –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
                    f"üì¶ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°: {total_weight:.2f} ‡∏Å‡∏Å.\n"  # "–û–±—â–∏–π –≤–µ—Å: –∫–≥"
                    f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: {total_pay:.2f} ‡∏ö‡∏≤‡∏ó\n\n"  # "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: —Ä—É–±."
                    f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö!"  # "–°–ø–∞—Å–∏–±–æ –≤–∞–º!"
                )
        
        await callback.message.edit_text(
            '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏∏‡∏á‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå',  # "–î–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≥—Ä—É–∑–∫–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—à–∫–æ–≤ –æ–±–Ω—É–ª–µ–Ω–æ."
            reply_markup=driver_keyboard()
        )
    except ValueError as e:
        await callback.message.edit_text(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")  # "‚ùå –û—à–∏–±–∫–∞:"
    except Exception as e:
        await callback.message.edit_text(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {str(e)}")  # "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:"
    finally:
        await state.clear()
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@admin.callback_query(F.data == "cancel_shipment")
async def cancel_shipment(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß",  # "‚ùå –û—Ç–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞
@admin.callback_query(F.data == "cancel_during_input")
async def cancel_during_input(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö",  # "‚ùå –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω. –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
    )
    await callback.answer()


@admin.callback_query(F.data == "create_point")
async def start_create_point(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    await callback.message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RZZN ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà:\n"  # "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RZZN, –≥–¥–µ:"
        "R - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (1 ‡∏´‡∏•‡∏±‡∏Å)\n"  # "R - –Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ (1 —Ü–∏—Ñ—Ä–∞)"
        "ZZ - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ã‡∏ô (2 ‡∏´‡∏•‡∏±‡∏Å)\n"  # "ZZ - –Ω–æ–º–µ—Ä –∑–æ–Ω—ã (2 —Ü–∏—Ñ—Ä—ã)"
        "N - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô (1 ‡∏´‡∏•‡∏±‡∏Å)\n"  # "N - –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏ –≤ –∑–æ–Ω–µ (1 —Ü–∏—Ñ—Ä–∞)"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1021 - ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ 1 ‡πÇ‡∏ã‡∏ô 02 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1",  # "–ü—Ä–∏–º–µ—Ä: 1021 - —Ç–æ—á–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ 1, –∑–æ–Ω–µ 02, –Ω–æ–º–µ—Ä —Ç–æ—á–∫–∏ 1"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.point_id)
    await callback.answer()

@admin.message(CreatePoint.point_id, F.text.regexp(r'^\d{4}$'))
async def process_point_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–æ—á–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞"""
    point_id = message.text
    region_id = int(point_id[0])
    zone_num = int(point_id[1:3])
    zone_id = int(f"{region_id}{zone_num:02d}")
    point_num = int(point_id[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º ID
    if await get_point_by_id(point_id):
        await message.answer(
            "‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏≠‡∏∑‡πà‡∏ô",  # "–¢–æ—á–∫–∞ —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID."
            reply_markup=cancel_keyboard()
        )
        return
    
    await state.update_data(
        point_id=point_id,
        region_id=region_id,
        zone_num=zone_num,
        zone_id=zone_id,
        point_num=point_num
    )
    
    await message.answer(
        f"ID ‡∏à‡∏∏‡∏î: {point_id}\n"
        f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: {region_id}\n"
        f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ã‡∏ô: {zone_num}\n"
        f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î: {point_num}\n\n"
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.point_name)

@admin.message(CreatePoint.point_id)
async def process_point_id_invalid(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ ID —Ç–æ—á–∫–∏"""
    await message.answer(
        "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡∏à‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RZZN\n"
        "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1021 - ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ 1 ‡πÇ‡∏ã‡∏ô 02 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1",  # "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ—á–∫–∏! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ RZZN"
        reply_markup=cancel_keyboard()
    )

@admin.message(CreatePoint.point_name)
async def process_point_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    await state.update_data(point_name=message.text)
    await message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–æ—á–∫–∏:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.point_owner_name)

@admin.message(CreatePoint.point_owner_name)
async def process_owner_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    await state.update_data(point_owner_name=message.text)
    await message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.phone_number)

@admin.message(CreatePoint.phone_number)
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone_number=message.text)
    await message.answer(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏∏‡∏î:",  # "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏:"
        reply_markup=cancel_keyboard()
    )
    await state.set_state(CreatePoint.address)

@admin.message(CreatePoint.address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞"""
    await state.update_data(address=message.text)
    
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô:\n\n"  # "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
        f"ID ‡∏à‡∏∏‡∏î: {data['point_id']}\n"
        f"‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ: {data['region_id']}\n"
        f"‡πÇ‡∏ã‡∏ô: {data['zone_num']}\n"
        f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î: {data['point_num']}\n"
        f"‡∏ä‡∏∑‡πà‡∏≠: {data['point_name']}\n"
        f"‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: {data['point_owner_name']}\n"
        f"‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {data['phone_number']}\n"
        f"‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: {data['address']}\n\n"
        "‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"  # "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await message.answer(confirm_text, reply_markup=confirm_keyboard())
    await state.set_state(CreatePoint.confirmation)

@admin.callback_query(CreatePoint.confirmation, F.data == "confirm")
async def confirm_point_creation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    data = await state.get_data()
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω
        if not await get_region_by_id(data['region_id']):
            await add_region(data['region_id'])
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∑–æ–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º zone_id –∏–∑ 3 —Ü–∏—Ñ—Ä)
        if not await get_zone_by_id(data['zone_id']):
            await add_zone(data['zone_id'], data['region_id'])
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º point_id –∫–∞–∫ —Å—Ç—Ä–æ–∫—É)
        await add_point(
            point_id=data['point_id'],
            point_name=data['point_name'],
            point_owner_name=data['point_owner_name'],
            phone_number=data['phone_number'],
            address=data['address'],
            bags_count=0,
            zone_id=data['zone_id']
        )
        
        await callback.message.answer(
            "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",  # "‚úÖ –¢–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
            reply_markup=admin_keyboard()
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î: {str(e)}",  # "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ—á–∫–∏:"
            reply_markup=admin_keyboard()
        )
    finally:
        await state.clear()

@admin.callback_query(CreatePoint.confirmation, F.data == "cancel")
async def cancel_point_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏"""
    await callback.message.answer(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î",  # "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        reply_markup=admin_keyboard()
    )
    await state.clear()

@admin.callback_query(StateFilter(CreatePoint), F.data == "cancel_operation")
async def cancel_creation_process(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ"""
    await callback.message.answer(
        "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î",  # "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ."
        reply_markup=admin_keyboard()
    )
    await state.clear()